{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx\";\nimport React, { useRef, useEffect } from 'react';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BackgroundCanvas(props) {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$(),\n      _s4 = $RefreshSig$();\n\n  const {\n    darkMode\n  } = props(function (global) {\n    var module = global.noise = {};\n\n    function Grad(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n\n    Grad.prototype.dot2 = function (x, y) {\n      return this.x * x + this.y * y;\n    };\n\n    Grad.prototype.dot3 = function (x, y, z) {\n      return this.x * x + this.y * y + this.z * z;\n    };\n\n    var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n    var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\n    var perm = new Array(512);\n    var gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n    // different seed values. Write something better if you need more seeds.\n\n    module.seed = function (seed) {\n      if (seed > 0 && seed < 1) {\n        // Scale the seed out\n        seed *= 65536;\n      }\n\n      seed = Math.floor(seed);\n\n      if (seed < 256) {\n        seed |= seed << 8;\n      }\n\n      for (var i = 0; i < 256; i++) {\n        var v;\n\n        if (i & 1) {\n          v = p[i] ^ seed & 255;\n        } else {\n          v = p[i] ^ seed >> 8 & 255;\n        }\n\n        perm[i] = perm[i + 256] = v;\n        gradP[i] = gradP[i + 256] = grad3[v % 12];\n      }\n    };\n\n    module.seed(0);\n    /*\n    for(var i=0; i<256; i++) {\n      perm[i] = perm[i + 256] = p[i];\n      gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n    }*/\n    // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n    var F2 = 0.5 * (Math.sqrt(3) - 1);\n    var G2 = (3 - Math.sqrt(3)) / 6;\n    var F3 = 1 / 3;\n    var G3 = 1 / 6; // 2D simplex noise\n\n    module.simplex2 = function (xin, yin) {\n      var n0, n1, n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n      var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      if (x0 > y0) {\n        // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        i1 = 1;\n        j1 = 0;\n      } else {\n        // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        i1 = 0;\n        j1 = 1;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      i &= 255;\n      j &= 255;\n      var gi0 = gradP[i + perm[j]];\n      var gi1 = gradP[i + i1 + perm[j + j1]];\n      var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * gi1.dot2(x1, y1);\n      }\n\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * gi2.dot2(x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70 * (n0 + n1 + n2);\n    }; // 3D simplex noise\n\n\n    module.simplex3 = function (xin, yin, zin) {\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n\n      var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n      var y0 = yin - j + t;\n      var z0 = zin - k + t; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        }\n      } else {\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        }\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      var x1 = x0 - i1 + G3; // Offsets for second corner\n\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\n      var y2 = y0 - j2 + 2 * G3;\n      var z2 = z0 - k2 + 2 * G3;\n      var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\n      var y3 = y0 - 1 + 3 * G3;\n      var z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      i &= 255;\n      j &= 255;\n      k &= 255;\n      var gi0 = gradP[i + perm[j + perm[k]]];\n      var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n      var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n      var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]]; // Calculate the contribution from the four corners\n\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n      }\n\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n      }\n\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 32 * (n0 + n1 + n2 + n3);\n    }; // ##### Perlin noise stuff\n\n\n    function fade(t) {\n      return t * t * t * (t * (t * 6 - 15) + 10);\n    }\n\n    function lerp(a, b, t) {\n      return (1 - t) * a + t * b;\n    } // 2D Perlin Noise\n\n\n    module.perlin2 = function (x, y) {\n      // Find unit grid cell containing point\n      var X = Math.floor(x),\n          Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n      x = x - X;\n      y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n      X = X & 255;\n      Y = Y & 255; // Calculate noise contributions from each of the four corners\n\n      var n00 = gradP[X + perm[Y]].dot2(x, y);\n      var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n      var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n      var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1); // Compute the fade curve value for x\n\n      var u = fade(x); // Interpolate the four results\n\n      return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n    }; // 3D Perlin Noise\n\n\n    module.perlin3 = function (x, y, z) {\n      // Find unit grid cell containing point\n      var X = Math.floor(x),\n          Y = Math.floor(y),\n          Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n      x = x - X;\n      y = y - Y;\n      z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n      X = X & 255;\n      Y = Y & 255;\n      Z = Z & 255; // Calculate noise contributions from each of the eight corners\n\n      var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n      var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n      var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n      var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n      var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n      var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n      var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n      var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1); // Compute the fade curve value for x, y, z\n\n      var u = fade(x);\n      var v = fade(y);\n      var w = fade(z); // Interpolate\n\n      return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n    };\n  })(this); // When forming a MESH with useFrame(), it must be its own component, outside of App()\n\n  function Sphere(props) {\n    _s();\n\n    const mesh = useRef(null);\n    useFrame((state, delta) => mesh.current.rotation.x += 0.01);\n    useFrame((state, delta) => mesh.current.rotation.y += 0.01);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 128, 128]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }, this);\n  }\n\n  _s(Sphere, \"FIkUQYXLgs6Y9py+5HT08fVwj9E=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  function Skeleton(props) {\n    _s2();\n\n    const mesh = useRef(null);\n    useFrame((state, delta) => mesh.current.rotation.x -= 0.005);\n    useFrame((state, delta) => mesh.current.rotation.y -= 0.005);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        args: [1.5, 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#ffffff\",\n        wireframe: true,\n        wireframeLinewidth: 200,\n        side: DoubleSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s2(Skeleton, \"FIkUQYXLgs6Y9py+5HT08fVwj9E=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  function Plane(props) {\n    _s3();\n\n    const meshPlane = useRef(null);\n    useEffect(() => {\n      meshPlane.current.rotation.x = Math.PI / 4 * -1;\n    });\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: meshPlane,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        attach: \"geometry\",\n        args: [100, 100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {\n        attach: \"material\",\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s3(Plane, \"ON8hkDgRUJBfzQe1vB/Vo2D5zSM=\");\n\n  function Test(props) {\n    _s4();\n\n    const mesh = useRef(null); // Rotating animation\n\n    useFrame((state, delta) => {\n      mesh.current.rotation.x += 0.01;\n      mesh.current.rotation.y += 0.01;\n    }); // Accessing vertices\n\n    useEffect(() => {\n      const {\n        geometry\n      } = mesh.current;\n      const {\n        position\n      } = geometry.attributes; // vertices of geometry\n\n      console.log(geometry);\n    });\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      castShadow: true,\n      receiveShadow: false,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 128, 128]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: 0xB5D5FE,\n        roughness: 0.6,\n        metalness: 0.2,\n        side: FrontSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 11\n    }, this);\n  }\n\n  _s4(Test, \"r1b8OREENRiuiYc1kwW9abd5+Ww=\", false, function () {\n    return [useFrame];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    id: \"canvas-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        intensity: 0.8,\n        position: [10, 10, 15]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n        position: [0, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Plane, {\n        position: [0, -10, -100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Test, {\n        position: [0, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 9\n  }, this);\n}\n_c = BackgroundCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundCanvas\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx"],"names":["React","useRef","useEffect","DoubleSide","FrontSide","Canvas","useFrame","BackgroundCanvas","props","darkMode","global","module","noise","Grad","x","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w","Sphere","mesh","state","delta","current","rotation","Skeleton","Plane","meshPlane","PI","Test","geometry","position","attributes","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { notStrictEqual } from 'assert';\ninterface bgCanvas {\n    darkMode: boolean;\n}\n\nexport default function BackgroundCanvas(props:bgCanvas) {\n    const { darkMode } = props\n    (function(global) {\n        var module = global.noise = {};\n      \n        function Grad(x, y, z) {\n          this.x = x; this.y = y; this.z = z;\n        }\n        \n        Grad.prototype.dot2 = function(x, y) {\n          return this.x*x + this.y*y;\n        };\n      \n        Grad.prototype.dot3 = function(x, y, z) {\n          return this.x*x + this.y*y + this.z*z;\n        };\n      \n        var grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n                     new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n                     new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n      \n        var p = [151,160,137,91,90,15,\n        131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n        190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n        88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n        77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n        102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n        135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n        5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n        223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n        129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n        251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n        49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n        // To remove the need for index wrapping, double the permutation table length\n        var perm = new Array(512);\n        var gradP = new Array(512);\n      \n        // This isn't a very good seeding function, but it works ok. It supports 2^16\n        // different seed values. Write something better if you need more seeds.\n        module.seed = function(seed) {\n          if(seed > 0 && seed < 1) {\n            // Scale the seed out\n            seed *= 65536;\n          }\n      \n          seed = Math.floor(seed);\n          if(seed < 256) {\n            seed |= seed << 8;\n          }\n      \n          for(var i = 0; i < 256; i++) {\n            var v;\n            if (i & 1) {\n              v = p[i] ^ (seed & 255);\n            } else {\n              v = p[i] ^ ((seed>>8) & 255);\n            }\n      \n            perm[i] = perm[i + 256] = v;\n            gradP[i] = gradP[i + 256] = grad3[v % 12];\n          }\n        };\n      \n        module.seed(0);\n      \n        /*\n        for(var i=0; i<256; i++) {\n          perm[i] = perm[i + 256] = p[i];\n          gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n        }*/\n      \n        // Skewing and unskewing factors for 2, 3, and 4 dimensions\n        var F2 = 0.5*(Math.sqrt(3)-1);\n        var G2 = (3-Math.sqrt(3))/6;\n      \n        var F3 = 1/3;\n        var G3 = 1/6;\n      \n        // 2D simplex noise\n        module.simplex2 = function(xin, yin) {\n          var n0, n1, n2; // Noise contributions from the three corners\n          // Skew the input space to determine which simplex cell we're in\n          var s = (xin+yin)*F2; // Hairy factor for 2D\n          var i = Math.floor(xin+s);\n          var j = Math.floor(yin+s);\n          var t = (i+j)*G2;\n          var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n          var y0 = yin-j+t;\n          // For the 2D case, the simplex shape is an equilateral triangle.\n          // Determine which simplex we are in.\n          var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n          if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            i1=1; j1=0;\n          } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n            i1=0; j1=1;\n          }\n          // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n          // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n          // c = (3-sqrt(3))/6\n          var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n          var y1 = y0 - j1 + G2;\n          var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n          var y2 = y0 - 1 + 2 * G2;\n          // Work out the hashed gradient indices of the three simplex corners\n          i &= 255;\n          j &= 255;\n          var gi0 = gradP[i+perm[j]];\n          var gi1 = gradP[i+i1+perm[j+j1]];\n          var gi2 = gradP[i+1+perm[j+1]];\n          // Calculate the contribution from the three corners\n          var t0 = 0.5 - x0*x0-y0*y0;\n          if(t0<0) {\n            n0 = 0;\n          } else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n          }\n          var t1 = 0.5 - x1*x1-y1*y1;\n          if(t1<0) {\n            n1 = 0;\n          } else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot2(x1, y1);\n          }\n          var t2 = 0.5 - x2*x2-y2*y2;\n          if(t2<0) {\n            n2 = 0;\n          } else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot2(x2, y2);\n          }\n          // Add contributions from each corner to get the final noise value.\n          // The result is scaled to return values in the interval [-1,1].\n          return 70 * (n0 + n1 + n2);\n        };\n      \n        // 3D simplex noise\n        module.simplex3 = function(xin, yin, zin) {\n          var n0, n1, n2, n3; // Noise contributions from the four corners\n      \n          // Skew the input space to determine which simplex cell we're in\n          var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n          var i = Math.floor(xin+s);\n          var j = Math.floor(yin+s);\n          var k = Math.floor(zin+s);\n      \n          var t = (i+j+k)*G3;\n          var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n          var y0 = yin-j+t;\n          var z0 = zin-k+t;\n      \n          // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n          // Determine which simplex we are in.\n          var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n          var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n          if(x0 >= y0) {\n            if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n            else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n            else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n          } else {\n            if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n            else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n            else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n          }\n          // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n          // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n          // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n          // c = 1/6.\n          var x1 = x0 - i1 + G3; // Offsets for second corner\n          var y1 = y0 - j1 + G3;\n          var z1 = z0 - k1 + G3;\n      \n          var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n          var y2 = y0 - j2 + 2 * G3;\n          var z2 = z0 - k2 + 2 * G3;\n      \n          var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n          var y3 = y0 - 1 + 3 * G3;\n          var z3 = z0 - 1 + 3 * G3;\n      \n          // Work out the hashed gradient indices of the four simplex corners\n          i &= 255;\n          j &= 255;\n          k &= 255;\n          var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n          var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n          var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n          var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n      \n          // Calculate the contribution from the four corners\n          var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n          if(t0<0) {\n            n0 = 0;\n          } else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n          }\n          var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n          if(t1<0) {\n            n1 = 0;\n          } else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n          }\n          var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n          if(t2<0) {\n            n2 = 0;\n          } else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n          }\n          var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n          if(t3<0) {\n            n3 = 0;\n          } else {\n            t3 *= t3;\n            n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n          }\n          // Add contributions from each corner to get the final noise value.\n          // The result is scaled to return values in the interval [-1,1].\n          return 32 * (n0 + n1 + n2 + n3);\n      \n        };\n      \n        // ##### Perlin noise stuff\n      \n        function fade(t) {\n          return t*t*t*(t*(t*6-15)+10);\n        }\n      \n        function lerp(a, b, t) {\n          return (1-t)*a + t*b;\n        }\n      \n        // 2D Perlin Noise\n        module.perlin2 = function(x, y) {\n          // Find unit grid cell containing point\n          var X = Math.floor(x), Y = Math.floor(y);\n          // Get relative xy coordinates of point within that cell\n          x = x - X; y = y - Y;\n          // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n          X = X & 255; Y = Y & 255;\n      \n          // Calculate noise contributions from each of the four corners\n          var n00 = gradP[X+perm[Y]].dot2(x, y);\n          var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n          var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n          var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n      \n          // Compute the fade curve value for x\n          var u = fade(x);\n      \n          // Interpolate the four results\n          return lerp(\n              lerp(n00, n10, u),\n              lerp(n01, n11, u),\n             fade(y));\n        };\n      \n        // 3D Perlin Noise\n        module.perlin3 = function(x, y, z) {\n          // Find unit grid cell containing point\n          var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n          // Get relative xyz coordinates of point within that cell\n          x = x - X; y = y - Y; z = z - Z;\n          // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n          X = X & 255; Y = Y & 255; Z = Z & 255;\n      \n          // Calculate noise contributions from each of the eight corners\n          var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n          var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n          var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n          var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n          var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n          var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n          var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n          var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n      \n          // Compute the fade curve value for x, y, z\n          var u = fade(x);\n          var v = fade(y);\n          var w = fade(z);\n      \n          // Interpolate\n          return lerp(\n              lerp(\n                lerp(n000, n100, u),\n                lerp(n001, n101, u), w),\n              lerp(\n                lerp(n010, n110, u),\n                lerp(n011, n111, u), w),\n             v);\n        };\n      \n      })(this);\n    \n    // When forming a MESH with useFrame(), it must be its own component, outside of App()\n    function Sphere(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x += 0.01))\n        useFrame((state, delta) => (mesh.current.rotation.y += 0.01))\n        return (\n          <mesh\n            {...props}\n            ref={mesh}>\n            <sphereGeometry args={[1,128,128]} /> {/* radius, widthSeg, heightSeg */}\n            <meshNormalMaterial />\n          </mesh>\n        )\n    }\n    function Skeleton(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x -= 0.005))\n        useFrame((state, delta) => (mesh.current.rotation.y -= 0.005))\n        return (\n            <mesh\n                {...props}\n                ref={mesh}>\n                <icosahedronGeometry args={[1.5, 2]} />  {/* radius, detail */}\n                <meshPhongMaterial color=\"#ffffff\" wireframe={true} wireframeLinewidth={200} side={DoubleSide} />\n            </mesh>\n        )\n    }\n    function Plane(props: JSX.IntrinsicElements['mesh']) {\n        const meshPlane = useRef<THREE.Mesh>(null!)\n        useEffect(() => {\n            meshPlane.current.rotation.x = Math.PI / 4 * -1\n        })\n\n        return (\n            <mesh\n                {...props}\n                ref={meshPlane}>\n                <planeGeometry attach=\"geometry\" args={[100, 100]} />  {/* radius, detail */}\n                <meshNormalMaterial attach=\"material\" side={DoubleSide} transparent={true} opacity={0.3} />\n            </mesh>\n        )\n    }\n    \n\n    function Test(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        // Rotating animation\n        useFrame((state, delta) => {\n            mesh.current.rotation.x += 0.01\n            mesh.current.rotation.y += 0.01\n        })\n        // Accessing vertices\n        useEffect(() => {\n            const { geometry } = mesh.current\n            const { position } = geometry.attributes // vertices of geometry\n\n            console.log(geometry)\n        })\n        return (\n          <mesh\n            {...props}\n            ref={mesh}\n            castShadow={true}\n            receiveShadow={false}>\n            <sphereGeometry args={[1,128,128]} /> {/* radius, widthSeg, heightSeg */}\n            <meshStandardMaterial \n                color={0xB5D5FE}\n                roughness={0.6} \n                metalness={0.2} \n                side={FrontSide} />\n          </mesh>\n        )\n    }\n    \n    \n    return (\n        <div className='bg' id='canvas-container'>\n            {/* default: camera={ fov: 75, near: 0.1, far: 1000, position: [0, 0, 5] } */}\n            <Canvas>\n                <ambientLight intensity={0.3}/>\n                <pointLight intensity={0.8} position={[10, 10, 15]}/>\n                {/* <Sphere position={[0,0,0]} /> */}\n                <Skeleton position={[0,0,0]} />\n                <Plane position={[0,-10,-100]} />\n                <Test position={[0,0,0]} />\n            </Canvas>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}