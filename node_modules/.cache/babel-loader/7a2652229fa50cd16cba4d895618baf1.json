{"ast":null,"code":"/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\nexport let x = 10;\nexport let noise = {}; // Creating Gradient\n\nfunction Grad(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n}\n\n_c = Grad;\n\nGrad.prototype.dot2 = function (x, y) {\n  return this.x * x + this.y * y;\n};\n\nGrad.prototype.dot3 = function (x, y, z) {\n  return this.x * x + this.y * y + this.z * z;\n};\n\nlet grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\nlet p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\nlet perm = new Array(512);\nlet gradP = new Array(512); // Seed\n// Spports 2^16\n// different seed values. Write something better if you need more seeds.\n\nnoise.seed = function (seed) {\n  if (seed > 0 && seed < 1) {\n    // Scale the seed out\n    seed *= 65536;\n  }\n\n  seed = Math.floor(seed);\n\n  if (seed < 256) {\n    seed |= seed << 8;\n  }\n\n  for (let i = 0; i < 256; i++) {\n    let v;\n\n    if (i & 1) {\n      v = p[i] ^ seed & 255;\n    } else {\n      v = p[i] ^ seed >> 8 & 255;\n    }\n\n    perm[i] = perm[i + 256] = v;\n    gradP[i] = gradP[i + 256] = grad3[v % 12];\n  }\n};\n\nnoise.seed(0); // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\nlet F2 = 0.5 * (Math.sqrt(3) - 1);\nlet G2 = (3 - Math.sqrt(3)) / 6;\nlet F3 = 1 / 3;\nlet G3 = 1 / 6; // 2D simplex noise\n\nnoise.simplex2 = function (xin, yin) {\n  let n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n\n  let s = (xin + yin) * F2; // Hairy factor for 2D\n\n  let i = Math.floor(xin + s);\n  let j = Math.floor(yin + s);\n  let t = (i + j) * G2;\n  let x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n  let y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n\n  let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n  if (x0 > y0) {\n    // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    i1 = 1;\n    j1 = 0;\n  } else {\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    i1 = 0;\n    j1 = 1;\n  } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n\n\n  let x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n  let y1 = y0 - j1 + G2;\n  let x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n  let y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n  i &= 255;\n  j &= 255;\n  let gi0 = gradP[i + perm[j]];\n  let gi1 = gradP[i + i1 + perm[j + j1]];\n  let gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n  let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n  if (t0 < 0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n  }\n\n  let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n  if (t1 < 0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot2(x1, y1);\n  }\n\n  let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n  if (t2 < 0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot2(x2, y2);\n  } // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n\n\n  return 70 * (n0 + n1 + n2);\n}; // 3D simplex noise\n\n\nnoise.simplex3 = function (xin, yin, zin) {\n  let n0, n1, n2, n3; // Noise contributions from the four corners\n  // Skew the input space to determine which simplex cell we're in\n\n  let s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\n  let i = Math.floor(xin + s);\n  let j = Math.floor(yin + s);\n  let k = Math.floor(zin + s);\n  let t = (i + j + k) * G3;\n  let x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n  let y0 = yin - j + t;\n  let z0 = zin - k + t; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n  // Determine which simplex we are in.\n\n  let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n  let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n  if (x0 >= y0) {\n    if (y0 >= z0) {\n      i1 = 1;\n      j1 = 0;\n      k1 = 0;\n      i2 = 1;\n      j2 = 1;\n      k2 = 0;\n    } else if (x0 >= z0) {\n      i1 = 1;\n      j1 = 0;\n      k1 = 0;\n      i2 = 1;\n      j2 = 0;\n      k2 = 1;\n    } else {\n      i1 = 0;\n      j1 = 0;\n      k1 = 1;\n      i2 = 1;\n      j2 = 0;\n      k2 = 1;\n    }\n  } else {\n    if (y0 < z0) {\n      i1 = 0;\n      j1 = 0;\n      k1 = 1;\n      i2 = 0;\n      j2 = 1;\n      k2 = 1;\n    } else if (x0 < z0) {\n      i1 = 0;\n      j1 = 1;\n      k1 = 0;\n      i2 = 0;\n      j2 = 1;\n      k2 = 1;\n    } else {\n      i1 = 0;\n      j1 = 1;\n      k1 = 0;\n      i2 = 1;\n      j2 = 1;\n      k2 = 0;\n    }\n  } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n  // c = 1/6.\n\n\n  let x1 = x0 - i1 + G3; // Offsets for second corner\n\n  let y1 = y0 - j1 + G3;\n  let z1 = z0 - k1 + G3;\n  let x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\n  let y2 = y0 - j2 + 2 * G3;\n  let z2 = z0 - k2 + 2 * G3;\n  let x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\n  let y3 = y0 - 1 + 3 * G3;\n  let z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n  i &= 255;\n  j &= 255;\n  k &= 255;\n  let gi0 = gradP[i + perm[j + perm[k]]];\n  let gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n  let gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n  let gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]]; // Calculate the contribution from the four corners\n\n  let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n  if (t0 < 0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n  }\n\n  let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n  if (t1 < 0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n  }\n\n  let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n  if (t2 < 0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n  }\n\n  let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n  if (t3 < 0) {\n    n3 = 0;\n  } else {\n    t3 *= t3;\n    n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n  } // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n\n\n  return 32 * (n0 + n1 + n2 + n3);\n}; // Perlin noise stuff\n\n\nfunction fade(t) {\n  return t * t * t * (t * (t * 6 - 15) + 10);\n}\n\nfunction lerp(a, b, t) {\n  return (1 - t) * a + t * b;\n} // 2D Perlin Noise\n\n\nnoise.perlin2 = function (x, y) {\n  // Find unit grid cell containing point\n  let X = Math.floor(x),\n      Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n  x = x - X;\n  y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n  X = X & 255;\n  Y = Y & 255; // Calculate noise contributions from each of the four corners\n\n  let n00 = gradP[X + perm[Y]].dot2(x, y);\n  let n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n  let n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n  let n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1); // Compute the fade curve value for x\n\n  let u = fade(x); // Interpolate the four results\n\n  return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n}; // 3D Perlin Noise\n\n\nnoise.perlin3 = function (x, y, z) {\n  // Find unit grid cell containing point\n  let X = Math.floor(x),\n      Y = Math.floor(y),\n      Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n  x = x - X;\n  y = y - Y;\n  z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n  X = X & 255;\n  Y = Y & 255;\n  Z = Z & 255; // Calculate noise contributions from each of the eight corners\n\n  let n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n  let n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n  let n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n  let n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n  let n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n  let n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n  let n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n  let n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1); // Compute the fade curve value for x, y, z\n\n  let u = fade(x);\n  let v = fade(y);\n  let w = fade(z); // Interpolate\n\n  return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Grad\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin.js"],"names":["x","noise","Grad","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w"],"mappings":"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","sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\nexport let x = 10;\n\nexport let noise = {};\n\n// Creating Gradient\nfunction Grad(x, y, z) {\n  this.x = x; this.y = y; this.z = z;\n}\n\nGrad.prototype.dot2 = function(x, y) {\n  return this.x*x + this.y*y;\n};\n\nGrad.prototype.dot3 = function(x, y, z) {\n  return this.x*x + this.y*y + this.z*z;\n};\n\nlet grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n             new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n             new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\nlet p = [151,160,137,91,90,15,\n131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n// To remove the need for index wrapping, double the permutation table length\nlet perm = new Array(512);\nlet gradP = new Array(512);\n\n// Seed\n// Spports 2^16\n// different seed values. Write something better if you need more seeds.\nnoise.seed = function(seed) {\n  if(seed > 0 && seed < 1) {\n    // Scale the seed out\n    seed *= 65536;\n  }\n\n  seed = Math.floor(seed);\n  if(seed < 256) {\n    seed |= seed << 8;\n  }\n\n  for(let i = 0; i < 256; i++) {\n    let v;\n    if (i & 1) {\n      v = p[i] ^ (seed & 255);\n    } else {\n      v = p[i] ^ ((seed>>8) & 255);\n    }\n\n    perm[i] = perm[i + 256] = v;\n    gradP[i] = gradP[i + 256] = grad3[v % 12];\n  }\n};\n\nnoise.seed(0);\n\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\nlet F2 = 0.5*(Math.sqrt(3)-1);\nlet G2 = (3-Math.sqrt(3))/6;\n\nlet F3 = 1/3;\nlet G3 = 1/6;\n\n// 2D simplex noise\nnoise.simplex2 = function(xin, yin) {\n  let n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n  let s = (xin+yin)*F2; // Hairy factor for 2D\n  let i = Math.floor(xin+s);\n  let j = Math.floor(yin+s);\n  let t = (i+j)*G2;\n  let x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n  let y0 = yin-j+t;\n  // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n  let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n  if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    i1=1; j1=0;\n  } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    i1=0; j1=1;\n  }\n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n  let x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n  let y1 = y0 - j1 + G2;\n  let x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n  let y2 = y0 - 1 + 2 * G2;\n  // Work out the hashed gradient indices of the three simplex corners\n  i &= 255;\n  j &= 255;\n  let gi0 = gradP[i+perm[j]];\n  let gi1 = gradP[i+i1+perm[j+j1]];\n  let gi2 = gradP[i+1+perm[j+1]];\n  // Calculate the contribution from the three corners\n  let t0 = 0.5 - x0*x0-y0*y0;\n  if(t0<0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n  }\n  let t1 = 0.5 - x1*x1-y1*y1;\n  if(t1<0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot2(x1, y1);\n  }\n  let t2 = 0.5 - x2*x2-y2*y2;\n  if(t2<0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot2(x2, y2);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 70 * (n0 + n1 + n2);\n};\n\n// 3D simplex noise\nnoise.simplex3 = function(xin, yin, zin) {\n  let n0, n1, n2, n3; // Noise contributions from the four corners\n  \n  // Skew the input space to determine which simplex cell we're in\n  let s = (xin+yin+zin)*F3; // Hairy factor for 2D\n  let i = Math.floor(xin+s);\n  let j = Math.floor(yin+s);\n  let k = Math.floor(zin+s);\n\n  let t = (i+j+k)*G3;\n  let x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n  let y0 = yin-j+t;\n  let z0 = zin-k+t;\n\n  // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n  // Determine which simplex we are in.\n  let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n  let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n  if(x0 >= y0) {\n    if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n    else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n    else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n  } else {\n    if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n    else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n    else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n  }\n  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n  // c = 1/6.\n  let x1 = x0 - i1 + G3; // Offsets for second corner\n  let y1 = y0 - j1 + G3;\n  let z1 = z0 - k1 + G3;\n\n  let x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n  let y2 = y0 - j2 + 2 * G3;\n  let z2 = z0 - k2 + 2 * G3;\n\n  let x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n  let y3 = y0 - 1 + 3 * G3;\n  let z3 = z0 - 1 + 3 * G3;\n\n  // Work out the hashed gradient indices of the four simplex corners\n  i &= 255;\n  j &= 255;\n  k &= 255;\n  let gi0 = gradP[i+   perm[j+   perm[k   ]]];\n  let gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n  let gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n  let gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n  // Calculate the contribution from the four corners\n  let t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n  if(t0<0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n  }\n  let t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n  if(t1<0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n  }\n  let t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n  if(t2<0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n  }\n  let t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n  if(t3<0) {\n    n3 = 0;\n  } else {\n    t3 *= t3;\n    n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 32 * (n0 + n1 + n2 + n3);\n}\n\n// Perlin noise stuff\nfunction fade(t) {\n  return t*t*t*(t*(t*6-15)+10);\n}\n\nfunction lerp(a, b, t) {\n  return (1-t)*a + t*b;\n}\n\n// 2D Perlin Noise\nnoise.perlin2 = function(x, y) {\n  // Find unit grid cell containing point\n  let X = Math.floor(x), Y = Math.floor(y);\n  // Get relative xy coordinates of point within that cell\n  x = x - X; y = y - Y;\n  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n  X = X & 255; Y = Y & 255;\n\n  // Calculate noise contributions from each of the four corners\n  let n00 = gradP[X+perm[Y]].dot2(x, y);\n  let n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n  let n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n  let n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n  // Compute the fade curve value for x\n  let u = fade(x);\n\n  // Interpolate the four results\n  return lerp(\n      lerp(n00, n10, u),\n      lerp(n01, n11, u),\n     fade(y));\n};\n\n// 3D Perlin Noise\nnoise.perlin3 = function(x, y, z) {\n  // Find unit grid cell containing point\n  let X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n  // Get relative xyz coordinates of point within that cell\n  x = x - X; y = y - Y; z = z - Z;\n  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n  X = X & 255; Y = Y & 255; Z = Z & 255;\n\n  // Calculate noise contributions from each of the eight corners\n  let n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n  let n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n  let n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n  let n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n  let n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n  let n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n  let n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n  let n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n  // Compute the fade curve value for x, y, z\n  let u = fade(x);\n  let v = fade(y);\n  let w = fade(z);\n\n  // Interpolate\n  return lerp(\n      lerp(\n        lerp(n000, n100, u),\n        lerp(n001, n101, u), w),\n      lerp(\n        lerp(n010, n110, u),\n        lerp(n011, n111, u), w),\n     v);\n};\n\n"]},"metadata":{},"sourceType":"module"}