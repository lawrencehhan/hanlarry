{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/Projects.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport projectData from './projectCard/projectData';\nimport ProjectCard from './projectCard/ProjectCard';\nimport './projects.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Projects(props) {\n  _s();\n\n  const {\n    darkMode,\n    projectRef\n  } = props;\n  const controls = useAnimation();\n  const {\n    ref,\n    inView\n  } = useInView();\n  useEffect(() => {\n    if (inView) {\n      controls.start(\"visible\");\n    }\n  }, [controls, inView]);\n  const cards = projectData.map(proj => {\n    return /*#__PURE__*/_jsxDEV(ProjectCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `projects page ${darkMode && \"dark\"}`,\n    ref: projectRef,\n    children: /*#__PURE__*/_jsxDEV(motion.p, {\n      className: \"projects-main-title\",\n      children: [\"my \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" experience \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this), \" and \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" projects \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Projects, \"hfIZHLdLU/wHYEBob1fDEa5Q/ao=\", false, function () {\n  return [useAnimation, useInView];\n});\n\n_c = Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/Projects.tsx"],"names":["React","useEffect","motion","useAnimation","useInView","projectData","ProjectCard","Projects","props","darkMode","projectRef","controls","ref","inView","start","cards","map","proj"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,eAArC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,gBAAP;;AAOA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAkC;AAAA;;AAC7C,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAyBF,KAA/B;AACA,QAAMG,QAAQ,GAAGR,YAAY,EAA7B;AACA,QAAM;AAAES,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAkBT,SAAS,EAAjC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,MAAJ,EAAY;AACRF,MAAAA,QAAQ,CAACG,KAAT,CAAe,SAAf;AACH;AACJ,GAJQ,EAIN,CAACH,QAAD,EAAWE,MAAX,CAJM,CAAT;AAMA,QAAME,KAAK,GAAGV,WAAW,CAACW,GAAZ,CAAgBC,IAAI,IAAI;AAClC,wBACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANa,CAAd;AAQA,sBACI;AAAK,IAAA,SAAS,EAAG,iBAAgBR,QAAQ,IAAI,MAAO,EAApD;AAAuD,IAAA,GAAG,EAAEC,UAA5D;AAAA,2BACI,QAAC,MAAD,CAAQ,CAAR;AAAU,MAAA,SAAS,EAAC,qBAApB;AAAA,qCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADP,wBACqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAzBuBH,Q;UAEHJ,Y,EACOC,S;;;KAHJG,Q","sourcesContent":["import React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport projectData from './projectCard/projectData';\nimport ProjectCard from './projectCard/ProjectCard';\nimport './projects.css';\n\ninterface Projects {\n    darkMode: boolean;\n    projectRef: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport default function Projects(props:Projects) {\n    const {darkMode, projectRef} = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n    }, [controls, inView])\n\n    const cards = projectData.map(proj => {\n        return (\n            <ProjectCard\n            \n            />\n        )\n    })\n\n    return (\n        <div className={`projects page ${darkMode && \"dark\"}`} ref={projectRef}>\n            <motion.p className='projects-main-title'>\n                my <span> experience </span> and <span> projects </span>\n            </motion.p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}