{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/About.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport TitleBlob from './TitleBlob';\nimport TechIcons from './TechIcons';\nimport techData from '../../assets/techs/techData';\nimport './about.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Left Column About-Blurb\nconst AboutBlurb = props => {\n  _s();\n\n  const {\n    darkMode\n  } = props;\n  const controls = useAnimation();\n  const {\n    ref,\n    inView\n  } = useInView();\n  useEffect(() => {\n    if (inView) {\n      controls.start(\"visible\");\n    } // if (!inView) {\n    //     controls.start(\"hidden\")\n    // }\n\n  }, [controls, inView]);\n  const blurbTitle = {\n    hidden: {\n      opacity: 0\n    },\n    visible: {\n      opacity: 1,\n      transition: {\n        duration: 2,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n  const blurbText = {\n    hidden: {\n      opacity: 0,\n      y: -110\n    },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        delay: 1.5,\n        duration: 3,\n        ease: \"easeOut\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"about-blurb about-col\",\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      className: `blurb-title ${darkMode && \"dark\"}`,\n      ref: ref,\n      initial: \"hidden\",\n      animate: controls,\n      variants: blurbTitle,\n      children: \"about me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      className: `blurb-text ${darkMode && \"dark\"}`,\n      initial: \"hidden\",\n      animate: controls,\n      variants: blurbText,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"I\\u2019m an engineer based in San Francisco, CA - specializing in data anlaysis and regenerative-biomaterial therapeutics. I graduated from the University of Virginia with a BS In biomedical-engineering, and a minor in computer science.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), \"somethingsomething on learning to code because of lab web/photography, then because of realizing how i could speed up data insights by using code at tempo,\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), \"somesomething about while having experience in the lab, passion in building software projects that complenemtn and boost research.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}; // Right Column About-Tech summary\n\n\n_s(AboutBlurb, \"hfIZHLdLU/wHYEBob1fDEa5Q/ao=\", false, function () {\n  return [useAnimation, useInView];\n});\n\n_c = AboutBlurb;\nconst techs = techData.map(tech => {\n  return /*#__PURE__*/_jsxDEV(TechIcons, {\n    name: tech.name,\n    icon: tech.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n});\n\nconst AboutDetail = props => {\n  _s2();\n\n  const {\n    darkMode\n  } = props;\n  const controls = useAnimation();\n  const {\n    ref,\n    inView\n  } = useInView();\n  useEffect(() => {\n    if (inView) {\n      controls.start(\"visible\");\n    }\n  }, [controls, inView]);\n  const textVariants = {\n    hidden: {\n      opacity: 0\n    },\n    visible: {\n      opacity: 1,\n      transition: {\n        delay: 2,\n        duration: 2,\n        ease: 'easeInOut'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"about-detail about-col\",\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"detail-title\",\n      children: [/*#__PURE__*/_jsxDEV(TitleBlob, {\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(motion.p, {\n        className: `title-text ${darkMode && \"dark\"}`,\n        ref: ref,\n        initial: \"hidden\",\n        animate: controls,\n        variants: textVariants,\n        children: \"technologies I've worked with\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"detail-techs\",\n      children: [techs, \"yoyoyo\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(AboutDetail, \"hfIZHLdLU/wHYEBob1fDEa5Q/ao=\", false, function () {\n  return [useAnimation, useInView];\n});\n\n_c2 = AboutDetail;\nexport default function About(props) {\n  const {\n    darkMode,\n    aboutRef\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `about page ${darkMode && \"dark\"}`,\n    ref: aboutRef,\n    children: [/*#__PURE__*/_jsxDEV(AboutBlurb, {\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AboutDetail, {\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n}\n_c3 = About;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AboutBlurb\");\n$RefreshReg$(_c2, \"AboutDetail\");\n$RefreshReg$(_c3, \"About\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/About.tsx"],"names":["React","useEffect","motion","useAnimation","useInView","TitleBlob","TechIcons","techData","AboutBlurb","props","darkMode","controls","ref","inView","start","blurbTitle","hidden","opacity","visible","transition","duration","ease","blurbText","y","delay","techs","map","tech","name","icon","AboutDetail","textVariants","About","aboutRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport TitleBlob from './TitleBlob';\nimport TechIcons from './TechIcons';\nimport techData from '../../assets/techs/techData';\nimport './about.css';\n\ninterface About {\n    darkMode: boolean;\n    aboutRef?: React.MutableRefObject<HTMLDivElement | null>;\n}\n\n// Left Column About-Blurb\nconst AboutBlurb = (props:About) => {\n    const { darkMode } = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n        // if (!inView) {\n        //     controls.start(\"hidden\")\n        // }\n    }, [controls, inView])\n\n    const blurbTitle = {\n        hidden: { opacity: 0 },\n        visible: {\n            opacity: 1,\n            transition: {\n                duration: 2,\n                ease: \"easeInOut\"\n            }   \n        }\n    }\n    const blurbText = {\n        hidden: { opacity: 0, y: -110 },\n        visible: {\n            y: 0,\n            opacity: 1,\n            transition: {\n                delay: 1.5,\n                duration: 3,\n                ease: \"easeOut\"\n            }   \n        }\n    }\n\n    return (\n        <div className='about-blurb about-col'>\n            <motion.div className={`blurb-title ${darkMode && \"dark\"}`}\n            ref={ref}\n            initial=\"hidden\"\n            animate={controls}\n            variants={blurbTitle}>\n                about me\n            </motion.div>\n            <motion.div className={`blurb-text ${darkMode && \"dark\"}`}\n            initial=\"hidden\"\n            animate={controls}\n            variants={blurbText}>\n                <p>\n                    I’m an engineer based in San Francisco, CA - specializing in data anlaysis and regenerative-biomaterial therapeutics. I graduated from the University of Virginia with a BS In biomedical-engineering, and a minor in computer science. \n                </p>\n                <p>\n                    <br></br>somethingsomething on learning to code because of lab web/photography, then because of realizing how i could speed up data insights by using code at tempo, \n                </p>\n                <p>\n                    <br></br>somesomething about while having experience in the lab, passion in building software projects that complenemtn and boost research. \n                </p>\n            </motion.div>\n        </div>\n    )\n}\n\n// Right Column About-Tech summary\nconst techs = techData.map(tech => {\n    return (\n        <TechIcons\n            name={tech.name}\n            icon={tech.icon}\n        />\n    )\n})\nconst AboutDetail = (props:About) => {\n    const { darkMode } = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n    }, [controls, inView])\n\n    const textVariants = {\n        hidden: { opacity: 0 },\n        visible: {\n            opacity: 1,\n            transition: {\n                delay: 2,\n                duration: 2,\n                ease: 'easeInOut'\n            }\n        }\n    }\n\n    return (\n        <div className='about-detail about-col'>\n            <motion.div className='detail-title'>\n                <TitleBlob darkMode={darkMode} />\n                <motion.p className={`title-text ${darkMode && \"dark\"}`}\n                ref={ref}\n                initial=\"hidden\"\n                animate={controls}\n                variants={textVariants}>\n                    technologies I've worked with\n                </motion.p>\n            </motion.div>\n            <motion.div className='detail-techs'>\n                {/* TechBlob */}\n                {/* TechContainer of Icons mapped */}\n                {techs}\n                yoyoyo\n            </motion.div>\n        </div>\n    )\n}\n\nexport default function About(props:About) {\n    const {darkMode, aboutRef} = props;\n    return (\n        <div className={`about page ${darkMode && \"dark\"}`} ref={aboutRef}>\n            <AboutBlurb darkMode={darkMode} />\n            <AboutDetail darkMode={darkMode} />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}