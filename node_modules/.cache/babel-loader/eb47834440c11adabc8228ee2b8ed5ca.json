{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx\";\nimport React, { useRef, useEffect } from 'react';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BackgroundCanvas(props) {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$(),\n      _s4 = $RefreshSig$();\n\n  const {\n    darkMode\n  } = props; // When forming a MESH with useFrame(), it must be its own component, outside of App()\n\n  function Sphere(props) {\n    _s();\n\n    const mesh = useRef(null);\n    useFrame((state, delta) => mesh.current.rotation.x += 0.01);\n    useFrame((state, delta) => mesh.current.rotation.y += 0.01);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 128, 128]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this);\n  }\n\n  _s(Sphere, \"FIkUQYXLgs6Y9py+5HT08fVwj9E=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  function Skeleton(props) {\n    _s2();\n\n    const mesh = useRef(null);\n    useFrame((state, delta) => mesh.current.rotation.x -= 0.005);\n    useFrame((state, delta) => mesh.current.rotation.y -= 0.005);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        args: [1.5, 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#ffffff\",\n        wireframe: true,\n        wireframeLinewidth: 200,\n        side: DoubleSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s2(Skeleton, \"FIkUQYXLgs6Y9py+5HT08fVwj9E=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  function Plane(props) {\n    _s3();\n\n    const meshPlane = useRef(null);\n    useEffect(() => {\n      meshPlane.current.rotation.x = Math.PI / 4 * -1;\n    });\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: meshPlane,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        attach: \"geometry\",\n        args: [100, 100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {\n        attach: \"material\",\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s3(Plane, \"ON8hkDgRUJBfzQe1vB/Vo2D5zSM=\");\n\n  function Test(props) {\n    _s4();\n\n    const mesh = useRef(null);\n    const geoRef = useRef(null);\n    let ogPosition = useRef(null);\n    console.log('start' + ogPosition.current); // const originalPos = useMemo(() => {\n    //   const ogPos = mesh.current.geometry.attributes.position;\n    //   return (ogPos)  \n    // }, [])\n    // Rotating animation\n    // useFrame((state, delta) => {\n    //     mesh.current.rotation.x += 0.01\n    //     mesh.current.rotation.y += 0.01\n    // })\n\n    console.log('Render Check'); // Accessing vertices\n\n    useEffect(() => {\n      const {\n        geometry\n      } = mesh.current;\n      const {\n        position\n      } = geometry.attributes; // vertices of geometry\n\n      console.log(geometry);\n      ogPosition.current = position;\n      console.log('adjusted' + ogPosition.current);\n      console.log(geoRef.current.attributes.position);\n      console.log(geoRef.current.parameters.vertices); /// testing area\n\n      const ogPos = ogPosition.current;\n      const newPos = mesh.current.geometry.getAttribute(\"position\");\n      console.log(ogPos.array[0]);\n      console.log(newPos.array[0]); // let test = ogPos === newPos\n      // console.log(\"start state: \" + test)\n      // for (let vertex=0; vertex<ogPos.count; vertex++) {\n      //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n      //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n      //     let z = ogPos.array[(vertex*3)+2]\n      //     let perlin = noise.simplex3(\n      //         (x*0.006) + (0 * 0.0005),\n      //         (y*0.006) + (0 * 0.0005),\n      //         (z*0.006)\n      //     )\n      //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n      //     newPos.set\n      //     newPos.array[vertex*3] = newPos.array[vertex*3] * ratio\n      //     newPos.array[(vertex*3)+1] = newPos.array[(vertex*3)+1] * ratio\n      //     newPos.array[(vertex*3)+2] = newPos.array[(vertex*3)+2] * ratio\n      // }\n      // test = ogPos === newPos\n      // console.log(\"mid state after loop: \" + test)\n      // mesh.current.geometry.setAttribute('position', newPos);\n      // mesh.current.geometry.attributes.position.needsUpdate = true;\n    }, []);\n    useFrame((state, delta) => {// for(let i = 0; i < bubbleGeometry.vertices.length; i++) {\n      //     let vector = bubbleGeometry.vertices[i];\n      //     vector.copy(vector.original);\n      //     let perlin = noise.simplex3(\n      //       (vector.x * 0.006) + (time * 0.0005),\n      //       (vector.y * 0.006) + (time * 0.0005),\n      //       (vector.z * 0.006)\n      //     );\n      //     let ratio = ((perlin * 0.3 * (dist + 0.1)) + 0.8);\n      //     vector.multiplyScalar(ratio);\n      // const ogPos = ogPosition.current\n      // const newPos = mesh.current.geometry.getAttribute(\"position\");\n      // for (let vertex=0; vertex<ogPos.count; vertex++) {\n      //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n      //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n      //     let z = ogPos.array[(vertex*3)+2]\n      //     let perlin = noise.simplex3(\n      //         (x*0.006) + (delta * 0.0005),\n      //         (y*0.006) + (delta * 0.0005),\n      //         (z*0.006)\n      //     )\n      //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n      //     newPos[vertex*3] = newPos[vertex*3] * ratio\n      //     newPos[(vertex*3)+1] = newPos[(vertex*3)+1] * ratio\n      //     newPos[(vertex*3)+2] = newPos[(vertex*3)+2] * ratio\n      // }\n      // mesh.current.geometry.setAttribute('position', newPos);\n      // mesh.current.geometry.attributes.position.needsUpdate = true;\n      // console.log(\"new pos\")\n    });\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      castShadow: true,\n      receiveShadow: false,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        ref: geoRef,\n        args: [1, 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: 0xB5D5FE,\n        roughness: 0.6,\n        metalness: 0.2,\n        wireframe: true,\n        side: FrontSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }, this);\n  }\n\n  _s4(Test, \"fwNLOBtrH58H8E6sh8gK1KwNvTs=\", false, function () {\n    return [useFrame];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    id: \"canvas-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        intensity: 0.8,\n        position: [10, 10, 15]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Plane, {\n        position: [0, -10, -100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Test, {\n        position: [0, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n}\n_c = BackgroundCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundCanvas\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx"],"names":["React","useRef","useEffect","DoubleSide","FrontSide","Canvas","useFrame","BackgroundCanvas","props","darkMode","Sphere","mesh","state","delta","current","rotation","x","y","Skeleton","Plane","meshPlane","Math","PI","Test","geoRef","ogPosition","console","log","geometry","position","attributes","parameters","vertices","ogPos","newPos","getAttribute","array"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { notStrictEqual } from 'assert';\nimport { noise } from '../../Perlin';\ninterface bgCanvas {\n    darkMode: boolean;\n}\n\nexport default function BackgroundCanvas(props:bgCanvas) {\n    const { darkMode } = props\n    \n    // When forming a MESH with useFrame(), it must be its own component, outside of App()\n    function Sphere(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x += 0.01))\n        useFrame((state, delta) => (mesh.current.rotation.y += 0.01))\n        return (\n          <mesh\n            {...props}\n            ref={mesh}>\n            <sphereGeometry args={[1,128,128]} /> {/* radius, widthSeg, heightSeg */}\n            <meshNormalMaterial />\n          </mesh>\n        )\n    }\n    function Skeleton(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x -= 0.005))\n        useFrame((state, delta) => (mesh.current.rotation.y -= 0.005))\n        return (\n            <mesh\n                {...props}\n                ref={mesh}>\n                <icosahedronGeometry args={[1.5, 2]} />  {/* radius, detail */}\n                <meshPhongMaterial color=\"#ffffff\" wireframe={true} wireframeLinewidth={200} side={DoubleSide} />\n            </mesh>\n        )\n    }\n    function Plane(props: JSX.IntrinsicElements['mesh']) {\n        const meshPlane = useRef<THREE.Mesh>(null!)\n        useEffect(() => {\n            meshPlane.current.rotation.x = Math.PI / 4 * -1\n        })\n\n        return (\n            <mesh\n                {...props}\n                ref={meshPlane}>\n                <planeGeometry attach=\"geometry\" args={[100, 100]} />  {/* radius, detail */}\n                <meshNormalMaterial attach=\"material\" side={DoubleSide} transparent={true} opacity={0.3} />\n            </mesh>\n        )\n    }\n    \n\n    function Test(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        const geoRef = useRef<THREE.IcosahedronGeometry>(null!)\n        let ogPosition = useRef<THREE.BufferAttribute | THREE.InterleavedBufferAttribute>(null!);\n        console.log('start' + ogPosition.current)\n        \n        // const originalPos = useMemo(() => {\n        //   const ogPos = mesh.current.geometry.attributes.position;\n        //   return (ogPos)  \n        // }, [])\n        // Rotating animation\n        // useFrame((state, delta) => {\n        //     mesh.current.rotation.x += 0.01\n        //     mesh.current.rotation.y += 0.01\n        // })\n        console.log('Render Check')\n        // Accessing vertices\n        useEffect(() => {\n            const { geometry } = mesh.current\n            const { position } = geometry.attributes // vertices of geometry\n            console.log(geometry)\n            ogPosition.current = position\n            console.log('adjusted' + ogPosition.current)\n            console.log(geoRef.current.attributes.position)\n            console.log(geoRef.current.parameters.vertices)\n            /// testing area\n            const ogPos = ogPosition.current\n            const newPos = mesh.current.geometry.getAttribute(\"position\");\n            console.log(ogPos.array[0])\n            console.log(newPos.array[0])\n            // let test = ogPos === newPos\n            // console.log(\"start state: \" + test)\n            // for (let vertex=0; vertex<ogPos.count; vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (0 * 0.0005),\n            //         (y*0.006) + (0 * 0.0005),\n            //         (z*0.006)\n            //     )\n            //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n            //     newPos.set\n            //     newPos.array[vertex*3] = newPos.array[vertex*3] * ratio\n            //     newPos.array[(vertex*3)+1] = newPos.array[(vertex*3)+1] * ratio\n            //     newPos.array[(vertex*3)+2] = newPos.array[(vertex*3)+2] * ratio\n            // }\n            // test = ogPos === newPos\n            // console.log(\"mid state after loop: \" + test)\n            // mesh.current.geometry.setAttribute('position', newPos);\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            \n        }, [])\n\n        useFrame((state, delta) => {\n            // for(let i = 0; i < bubbleGeometry.vertices.length; i++) {\n            //     let vector = bubbleGeometry.vertices[i];\n            //     vector.copy(vector.original);\n            //     let perlin = noise.simplex3(\n            //       (vector.x * 0.006) + (time * 0.0005),\n            //       (vector.y * 0.006) + (time * 0.0005),\n            //       (vector.z * 0.006)\n            //     );\n            //     let ratio = ((perlin * 0.3 * (dist + 0.1)) + 0.8);\n            //     vector.multiplyScalar(ratio);\n\n            // const ogPos = ogPosition.current\n            // const newPos = mesh.current.geometry.getAttribute(\"position\");\n            // for (let vertex=0; vertex<ogPos.count; vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (delta * 0.0005),\n            //         (y*0.006) + (delta * 0.0005),\n            //         (z*0.006)\n            //     )\n            //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n            //     newPos[vertex*3] = newPos[vertex*3] * ratio\n            //     newPos[(vertex*3)+1] = newPos[(vertex*3)+1] * ratio\n            //     newPos[(vertex*3)+2] = newPos[(vertex*3)+2] * ratio\n            // }\n            // mesh.current.geometry.setAttribute('position', newPos);\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // console.log(\"new pos\")\n            \n\n        })\n        return (\n          <mesh\n            {...props}\n            ref={mesh}\n            castShadow={true}\n            receiveShadow={false}>\n            <icosahedronGeometry ref={geoRef} args={[1,1]} /> {/* radius, widthSeg, heightSeg */}\n            <meshStandardMaterial \n                color={0xB5D5FE}\n                roughness={0.6} \n                metalness={0.2} \n                wireframe={true}\n                side={FrontSide} />\n          </mesh>\n        )\n    }\n    \n    \n    return (\n        <div className='bg' id='canvas-container'>\n            {/* default: camera={ fov: 75, near: 0.1, far: 1000, position: [0, 0, 5] } */}\n            <Canvas>\n                <ambientLight intensity={0.3}/>\n                <pointLight intensity={0.8} position={[10, 10, 15]}/>\n                {/* <Sphere position={[0,0,0]} /> */}\n                {/* <Skeleton position={[0,0,0]} /> */}\n                <Plane position={[0,-10,-100]} />\n                <Test position={[0,0,0]} />\n            </Canvas>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}