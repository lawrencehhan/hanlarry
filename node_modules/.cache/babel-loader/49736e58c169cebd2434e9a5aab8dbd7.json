{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nexport default function useOnScreen(target) {\n  _s();\n\n  const observerRef = useRef(null);\n  const [isOnScreen, setIsOnScreen] = useState(false);\n  useEffect(() => {\n    observerRef.current = new IntersectionObserver(_ref => {\n      let [entry] = _ref;\n      return setIsOnScreen(entry.isIntersecting);\n    });\n  }, []);\n  useEffect(() => {\n    var _observerRef$current;\n\n    if (!target.current) {\n      return;\n    }\n\n    (_observerRef$current = observerRef.current) === null || _observerRef$current === void 0 ? void 0 : _observerRef$current.observe(target.current);\n    return () => {\n      var _observerRef$current2;\n\n      (_observerRef$current2 = observerRef.current) === null || _observerRef$current2 === void 0 ? void 0 : _observerRef$current2.disconnect();\n    };\n  }, [target]);\n  return isOnScreen;\n}\n\n_s(useOnScreen, \"w4LbvSGXwaqV6eO/2nQHDV1QK0s=\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/hooks/useOnScreen.tsx"],"names":["useState","useEffect","useRef","useOnScreen","target","observerRef","isOnScreen","setIsOnScreen","current","IntersectionObserver","entry","isIntersecting","observe","disconnect"],"mappings":";;AAAA,SAAgBA,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAA2E;AAAA;;AACtF,QAAMC,WAAW,GAAGH,MAAM,CAA8B,IAA9B,CAA1B;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,WAAW,CAACG,OAAZ,GAAsB,IAAIC,oBAAJ,CAAyB;AAAA,UAAC,CAACC,KAAD,CAAD;AAAA,aAC/CH,aAAa,CAACG,KAAK,CAACC,cAAP,CADkC;AAAA,KAAzB,CAAtB;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMAV,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZ,QAAI,CAACG,MAAM,CAACI,OAAZ,EAAqB;AACjB;AACH;;AACD,4BAAAH,WAAW,CAACG,OAAZ,8EAAqBI,OAArB,CAA6BR,MAAM,CAACI,OAApC;AAEA,WAAO,MAAM;AAAA;;AACb,+BAAAH,WAAW,CAACG,OAAZ,gFAAqBK,UAArB;AACC,KAFD;AAGH,GATQ,EASN,CAACT,MAAD,CATM,CAAT;AAWA,SAAOE,UAAP;AACH;;GAtBuBH,W","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport default function useOnScreen(target:React.MutableRefObject<HTMLDivElement | null>) {\n    const observerRef = useRef<IntersectionObserver | null>(null);\n    const [isOnScreen, setIsOnScreen] = useState(false);\n\n    useEffect(() => {\n        observerRef.current = new IntersectionObserver(([entry]) =>\n        setIsOnScreen(entry.isIntersecting)\n        );\n    }, []);\n\n    useEffect(() => {\n        if (!target.current) {\n            return\n        }\n        observerRef.current?.observe(target.current);\n\n        return () => {\n        observerRef.current?.disconnect();\n        };\n    }, [target]);\n\n    return isOnScreen;\n}\n"]},"metadata":{},"sourceType":"module"}