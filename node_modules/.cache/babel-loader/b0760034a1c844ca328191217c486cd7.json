{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx\";\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { noise } from '../../Perlin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BackgroundCanvas(props) {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$(),\n      _s4 = $RefreshSig$();\n\n  const {\n    darkMode\n  } = props; // When forming a MESH with useFrame(), it must be its own component, outside of App()\n\n  function Sphere(props) {\n    _s();\n\n    const mesh = useRef(null);\n    useFrame((state, delta) => mesh.current.rotation.x += 0.01);\n    useFrame((state, delta) => mesh.current.rotation.y += 0.01);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 128, 128]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this);\n  }\n\n  _s(Sphere, \"FIkUQYXLgs6Y9py+5HT08fVwj9E=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  function Skeleton(props) {\n    _s2();\n\n    const mesh = useRef(null);\n    useFrame((state, delta) => mesh.current.rotation.x -= 0.005);\n    useFrame((state, delta) => mesh.current.rotation.y -= 0.005);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        args: [1.5, 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#ffffff\",\n        wireframe: true,\n        wireframeLinewidth: 200,\n        side: DoubleSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s2(Skeleton, \"FIkUQYXLgs6Y9py+5HT08fVwj9E=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  function Plane(props) {\n    _s3();\n\n    const meshPlane = useRef(null);\n    useEffect(() => {\n      meshPlane.current.rotation.x = Math.PI / 4 * -1;\n    });\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: meshPlane,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        attach: \"geometry\",\n        args: [100, 100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {\n        attach: \"material\",\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s3(Plane, \"ON8hkDgRUJBfzQe1vB/Vo2D5zSM=\");\n\n  function Test(props) {\n    _s4();\n\n    const mesh = useRef(null); // let ogPosition = useRef<THREE.BufferAttribute | THREE.InterleavedBufferAttribute>(null!)\n\n    let ogGeo = useRef(null); // Saving original position as a reference\n\n    useEffect(() => {\n      // const { geometry } = mesh.current\n      // const { position } = geometry.attributes // vertices of geometry\n      // ogPosition.current = position // Saved here as mesh is not declared yet outside\n      const {\n        geometry\n      } = mesh.current;\n      ogGeo.current = geometry;\n    }); // const originalPos = useMemo(() => {\n    //   const ogPos = mesh.current.geometry.attributes.position;\n    //   return (ogPos)  \n    // }, [])\n    // Rotating animation\n\n    useFrame(_ref => {\n      let {\n        clock\n      } = _ref;\n      // const time = clock.getElapsedTime()\n      mesh.current.rotation.x += 0.01;\n      mesh.current.rotation.y += 0.01;\n    });\n    console.log('Render Check'); // Accessing vertices\n\n    useEffect(() => {// const { geometry } = mesh.current\n      // const { position } = geometry.attributes // vertices of geometry\n      // // WORKING\n      // console.log('ogGeo before')\n      // console.log(ogGeo.current.attributes.position)\n      // console.log('mesh before')\n      // console.log(mesh.current.geometry.attributes.position)\n      // let vertex = new THREE.Vector3()\n      // for (let i=0; i < 240; i++) {\n      //     vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n      //     console.log('Vertex before:')\n      //     console.log(vertex)\n      //     console.log('Vertex X val')\n      //     console.log(vertex.x)\n      //     console.log(noise.simplex3(0.5, 1, 0.5))\n      //     let perlin = noise.simplex3(\n      //         (vertex.x * 0.9) + (6000000000), // xyz coeff affecting extreme spike appearences when closer to 1\n      //         (vertex.y * 0.9)+ (6000000000), // added term is just increasing time\n      //         (vertex.z * 0.9)+ (6000000000))\n      //     let scale = 1 + (perlin * 0.1) // perlin coefficient affecting drasticness of size change from 1\n      //     vertex.multiplyScalar(scale)\n      //     console.log('Vertex after')\n      //     console.log(vertex)\n      //     console.log('Vertex X val')\n      //     console.log(vertex.x)\n      //     mesh.current.geometry.attributes.position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n      //     // mesh.current.geometry.attributes.position.needsUpdate = true\n      //     console.log(mesh.current.geometry.attributes.position.getX(i))\n      // }\n      // mesh.current.geometry.attributes.position.needsUpdate = true\n      // console.log('ogGeo after')\n      // console.log(ogGeo.current.attributes.position)\n      // console.log('mesh after')\n      // console.log(mesh.current.geometry.attributes.position)\n      // ogPosition.current = position // Held constant as an OG reference\n      // /// testing area\n      // const ogPos = ogPosition.current\n      // const newPos = mesh.current.geometry.getAttribute(\"position\"); // Current state\n      // const newPosArr = Float32Array.from(newPos.array) // Copy of Current\n      // console.log(\"-- START -- \")\n      // console.log('OG Array' + ogPos.array)    \n      // console.log('Mesh Current' + newPos.array)    \n      // console.log('Mesh Current Copy' + newPosArr.slice(0,5))\n      // for (let vertex=0; vertex<ogPos.count; vertex++) {\n      //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n      //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n      //     let z = ogPos.array[(vertex*3)+2]\n      //     let perlin = noise.simplex3(\n      //         (x*0.006) + (0 * 0.0005),\n      //         (y*0.006) + (0 * 0.0005),\n      //         (z*0.006)\n      //     )\n      //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n      //     newPosArr[vertex*3] = newPosArr[vertex*3] * ratio\n      //     newPosArr[(vertex*3)+1] = newPosArr[(vertex*3)+1] * ratio\n      //     newPosArr[(vertex*3)+2] = newPosArr[(vertex*3)+2] * ratio\n      // }\n      // console.log(\"-- After Loop -- \")\n      // console.log('OG Array' + ogPos.array)    \n      // console.log('Mesh Current' + newPos.array)    \n      // console.log('Mesh Current Copy' + newPosArr.slice(0,5))\n      // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n      // mesh.current.geometry.attributes.position.needsUpdate = true;\n      // const finalArr = mesh.current.geometry.getAttribute(\"position\").array\n      // console.log(finalArr)\n      // const ogPos = ogPosition.current\n      // const curPos = mesh.current.geometry.getAttribute(\"position\"); // Current position of mesh\n      // const newPosArr = Float32Array.from(ogPos.array) // Template of current position to be scaled\n      // console.log(newPosArr)\n      // for (let vertex=0; vertex<ogPos.count; vertex++) {\n      //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n      //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n      //     let z = ogPos.array[(vertex*3)+2]\n      //     let perlin = noise.simplex3(\n      //         (x*0.006) + (1 * 0.0002),\n      //         (y*0.006) + (1 * 0.0003),\n      //         (z*0.006)\n      //     )\n      //     let ratio = ((perlin * 0.3 ) + 1)\n      //     newPosArr[vertex*3] = newPosArr[vertex*3] * ratio\n      //     newPosArr[(vertex*3)+1] = newPosArr[(vertex*3)+1] * ratio\n      //     newPosArr[(vertex*3)+2] = newPosArr[(vertex*3)+2] * ratio\n      // }\n      // console.log(mesh.current.geometry.getAttribute('position'))\n      // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n      // mesh.current.geometry.attributes.position.needsUpdate = true;\n      // console.log(mesh.current.geometry.getAttribute('position'))\n      // console.log('Updated Mesh')\n    }, []);\n    useFrame(_ref2 => {\n      let {\n        clock\n      } = _ref2;\n      const time = clock.getElapsedTime();\n      const {\n        geometry\n      } = mesh.current;\n      const {\n        position\n      } = geometry.attributes; // vertices of geometry\n      // // WORKING part 1\n\n      let vertex = new THREE.Vector3();\n\n      for (let i = 0; i < ogGeo.current.attributes.position.count; i++) {\n        // vertex.fromBufferAttribute(ogGeo.current.attributes.position, i).setLength(1)\n        vertex.fromBufferAttribute(ogGeo.current.attributes.position, i);\n        let perlin = noise.simplex3(vertex.x * 0.7 + time, // xyz coeff affecting extreme spike appearences when closer to 1\n        vertex.y * 0.7 + time, // added term is just increasing time\n        vertex.z * 0.7 + time);\n        let scale = 1 + perlin * 0.0005; // perlin coefficient affecting drasticness of size change from 1\n\n        vertex.fromBufferAttribute(ogGeo.current.attributes.position, i);\n        vertex.multiplyScalar(scale); // keeps increasing or decreasing by scale for some reason\n        // vertex.setLength(scale)\n\n        position.setXYZ(i, vertex.x, vertex.y, vertex.z);\n        position.needsUpdate = true;\n      }\n\n      geometry.computeVertexNormals(); // ver alpha\n      // let vertex = new THREE.Vector3()\n      // for (let i=0; i < 240; i++) {\n      //     vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n      //     let perlin = noise.simplex3(\n      //         (vertex.x * 0.9) + (time * 0.002), // xyz coeff affecting extreme spike appearences when closer to 1\n      //         (vertex.y * 0.9)+ (time * 0.002), // added term is just increasing time\n      //         (vertex.z * 0.9)+ (time * 0.002))\n      //     let scale = 1 + (perlin * 0.001) // perlin coefficient affecting drasticness of size change from 1\n      //     vertex.multiplyScalar(scale)\n      //     mesh.current.geometry.attributes.position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n      //     mesh.current.geometry.attributes.position.needsUpdate = true\n      //     console.log(mesh.current.geometry.attributes.position.getX(i))\n      // }\n      // ver one\n      // const ogPos = ogPosition.current\n      // const curPos = mesh.current.geometry.getAttribute(\"position\"); // Current position of mesh\n      // const newPosArr = Float32Array.from(ogPos.array) // Template of current position to be scaled\n      // for (let vertex=0; vertex<(ogPos.count-3); vertex++) {\n      //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n      //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n      //     let z = ogPos.array[(vertex*3)+2]\n      //     let perlin = noise.simplex3(\n      //         (x*0.006) + (time * 0.002),\n      //         (y*0.006) + (time * 0.003),\n      //         (z*0.006)\n      //     )\n      //     let ratio = ((perlin * 0.3 ) + 1)\n      //     newPosArr[vertex*3] = ogPos.array[vertex*3] * ratio\n      //     newPosArr[(vertex*3)+1] = ogPos.array[(vertex*3)+1] * ratio\n      //     newPosArr[(vertex*3)+2] = ogPos.array[(vertex*3)+2] * ratio\n      // }\n      // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n      // mesh.current.geometry.attributes.position.needsUpdate = true;\n      // console.log('Updated Mesh')\n      // ver two\n      // let v3 = new THREE.Vector3()\n      // for (let i=0; i < position.count; i++) {\n      //     v3.fromBufferAttribute(position, i).setLength(3)\n      //     let perlin = noise.simplex3(v3.x + time, v3.y + time, v3.z + time)\n      //     v3.setLength(1 + 0.3 * 3)\n      //     position.setXYZ(i, v3.x, v3.y, v3.z)\n      // }\n      // position.needsUpdate = true;\n      // geometry.computeVertexNormals();\n      // ver three\n      // const ogPos = ogPosition.current\n      // const curPos = geometry.getAttribute('position')\n      // for ( let vertIndex = 0; vertIndex < curPos.count; vertIndex++ ) {\n      //     let vertex = new THREE.Vector3()\n      //     vertex.fromBufferAttribute( ogPos, vertIndex )\n      //     let perlin = noise.simplex3(\n      //         (vertex.x * 0.006) + (time * 0.0002),\n      //         (vertex.y * 0.006) + (time * 0.0003),\n      //         (vertex.z * 0.006)\n      //     )\n      //     let ratio = 1 + (perlin * 0.4)\n      //     vertex.multiplyScalar( ratio )\n      //     mesh.current.geometry.attributes.position.setXYZ(vertIndex, vertex.x, vertex.y, vertex.z)\n      // }\n      // position.needsUpdate = true\n      // console.log('UPdated mesh')\n    });\n    return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n      ref: mesh,\n      castShadow: true,\n      receiveShadow: false,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronBufferGeometry\", {\n        args: [1, 12]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: 0xB5D5FE,\n        roughness: 0.6,\n        metalness: 0.2,\n        wireframe: false,\n        side: FrontSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }, this);\n  }\n\n  _s4(Test, \"BWGtQSb/5QiUUyj8/tdC3Pd5+z4=\", false, function () {\n    return [useFrame, useFrame];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    id: \"canvas-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        intensity: 0.8,\n        position: [10, 10, 15]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Plane, {\n        position: [0, -10, -100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Test, {\n        position: [2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 9\n  }, this);\n}\n_c = BackgroundCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundCanvas\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx"],"names":["React","useRef","useEffect","THREE","DoubleSide","FrontSide","Canvas","useFrame","noise","BackgroundCanvas","props","darkMode","Sphere","mesh","state","delta","current","rotation","x","y","Skeleton","Plane","meshPlane","Math","PI","Test","ogGeo","geometry","clock","console","log","time","getElapsedTime","position","attributes","vertex","Vector3","i","count","fromBufferAttribute","perlin","simplex3","z","scale","multiplyScalar","setXYZ","needsUpdate","computeVertexNormals"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { notStrictEqual } from 'assert';\nimport { noise } from '../../Perlin';\ninterface bgCanvas {\n    darkMode: boolean;\n}\n\nexport default function BackgroundCanvas(props:bgCanvas) {\n    const { darkMode } = props\n    \n    // When forming a MESH with useFrame(), it must be its own component, outside of App()\n    function Sphere(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x += 0.01))\n        useFrame((state, delta) => (mesh.current.rotation.y += 0.01))\n        return (\n          <mesh\n            {...props}\n            ref={mesh}>\n            <sphereGeometry args={[1,128,128]} /> {/* radius, widthSeg, heightSeg */}\n            <meshNormalMaterial />\n          </mesh>\n        )\n    }\n    function Skeleton(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x -= 0.005))\n        useFrame((state, delta) => (mesh.current.rotation.y -= 0.005))\n        return (\n            <mesh\n                {...props}\n                ref={mesh}>\n                <icosahedronGeometry args={[1.5, 2]} />  {/* radius, detail */}\n                <meshPhongMaterial color=\"#ffffff\" wireframe={true} wireframeLinewidth={200} side={DoubleSide} />\n            </mesh>\n        )\n    }\n    function Plane(props: JSX.IntrinsicElements['mesh']) {\n        const meshPlane = useRef<THREE.Mesh>(null!)\n        useEffect(() => {\n            meshPlane.current.rotation.x = Math.PI / 4 * -1\n        })\n\n        return (\n            <mesh\n                {...props}\n                ref={meshPlane}>\n                <planeGeometry attach=\"geometry\" args={[100, 100]} />  {/* radius, detail */}\n                <meshNormalMaterial attach=\"material\" side={DoubleSide} transparent={true} opacity={0.3} />\n            </mesh>\n        )\n    }\n    \n\n    function Test(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        // let ogPosition = useRef<THREE.BufferAttribute | THREE.InterleavedBufferAttribute>(null!)\n        let ogGeo = useRef<THREE.BufferGeometry>(null!)\n\n        // Saving original position as a reference\n        useEffect(() => {\n            // const { geometry } = mesh.current\n            // const { position } = geometry.attributes // vertices of geometry\n            // ogPosition.current = position // Saved here as mesh is not declared yet outside\n            const { geometry } = mesh.current\n            ogGeo.current = geometry  \n        })\n        // const originalPos = useMemo(() => {\n        //   const ogPos = mesh.current.geometry.attributes.position;\n        //   return (ogPos)  \n        // }, [])\n\n        // Rotating animation\n        useFrame(({ clock }) => {\n            // const time = clock.getElapsedTime()\n            mesh.current.rotation.x += 0.01\n            mesh.current.rotation.y += 0.01\n        })\n        console.log('Render Check')\n        // Accessing vertices\n        useEffect(() => {\n            // const { geometry } = mesh.current\n            // const { position } = geometry.attributes // vertices of geometry\n\n            // // WORKING\n            // console.log('ogGeo before')\n            // console.log(ogGeo.current.attributes.position)\n            // console.log('mesh before')\n            // console.log(mesh.current.geometry.attributes.position)\n            // let vertex = new THREE.Vector3()\n            // for (let i=0; i < 240; i++) {\n            //     vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n            //     console.log('Vertex before:')\n            //     console.log(vertex)\n            //     console.log('Vertex X val')\n            //     console.log(vertex.x)\n            //     console.log(noise.simplex3(0.5, 1, 0.5))\n            //     let perlin = noise.simplex3(\n            //         (vertex.x * 0.9) + (6000000000), // xyz coeff affecting extreme spike appearences when closer to 1\n            //         (vertex.y * 0.9)+ (6000000000), // added term is just increasing time\n            //         (vertex.z * 0.9)+ (6000000000))\n            //     let scale = 1 + (perlin * 0.1) // perlin coefficient affecting drasticness of size change from 1\n            //     vertex.multiplyScalar(scale)\n            //     console.log('Vertex after')\n            //     console.log(vertex)\n            //     console.log('Vertex X val')\n            //     console.log(vertex.x)\n\n            //     mesh.current.geometry.attributes.position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n            //     // mesh.current.geometry.attributes.position.needsUpdate = true\n            //     console.log(mesh.current.geometry.attributes.position.getX(i))\n            // }\n            // mesh.current.geometry.attributes.position.needsUpdate = true\n            // console.log('ogGeo after')\n            // console.log(ogGeo.current.attributes.position)\n            // console.log('mesh after')\n            // console.log(mesh.current.geometry.attributes.position)\n            \n\n            // ogPosition.current = position // Held constant as an OG reference\n\n            // /// testing area\n            // const ogPos = ogPosition.current\n            // const newPos = mesh.current.geometry.getAttribute(\"position\"); // Current state\n            // const newPosArr = Float32Array.from(newPos.array) // Copy of Current\n            // console.log(\"-- START -- \")\n            // console.log('OG Array' + ogPos.array)    \n            // console.log('Mesh Current' + newPos.array)    \n            // console.log('Mesh Current Copy' + newPosArr.slice(0,5))\n            // for (let vertex=0; vertex<ogPos.count; vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (0 * 0.0005),\n            //         (y*0.006) + (0 * 0.0005),\n            //         (z*0.006)\n            //     )\n            //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n            //     newPosArr[vertex*3] = newPosArr[vertex*3] * ratio\n            //     newPosArr[(vertex*3)+1] = newPosArr[(vertex*3)+1] * ratio\n            //     newPosArr[(vertex*3)+2] = newPosArr[(vertex*3)+2] * ratio\n            // }\n            // console.log(\"-- After Loop -- \")\n            // console.log('OG Array' + ogPos.array)    \n            // console.log('Mesh Current' + newPos.array)    \n            // console.log('Mesh Current Copy' + newPosArr.slice(0,5))\n            // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // const finalArr = mesh.current.geometry.getAttribute(\"position\").array\n            // console.log(finalArr)\n\n            // const ogPos = ogPosition.current\n            // const curPos = mesh.current.geometry.getAttribute(\"position\"); // Current position of mesh\n            // const newPosArr = Float32Array.from(ogPos.array) // Template of current position to be scaled\n            // console.log(newPosArr)\n            // for (let vertex=0; vertex<ogPos.count; vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (1 * 0.0002),\n            //         (y*0.006) + (1 * 0.0003),\n            //         (z*0.006)\n            //     )\n                \n            //     let ratio = ((perlin * 0.3 ) + 1)\n            //     newPosArr[vertex*3] = newPosArr[vertex*3] * ratio\n            //     newPosArr[(vertex*3)+1] = newPosArr[(vertex*3)+1] * ratio\n            //     newPosArr[(vertex*3)+2] = newPosArr[(vertex*3)+2] * ratio\n            // }\n            // console.log(mesh.current.geometry.getAttribute('position'))\n            // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // console.log(mesh.current.geometry.getAttribute('position'))\n            // console.log('Updated Mesh')\n\n            \n        }, [])\n\n        useFrame(({ clock }) => {\n            const time = clock.getElapsedTime()\n            const { geometry } = mesh.current\n            const { position } = geometry.attributes // vertices of geometry\n\n            // // WORKING part 1\n            let vertex = new THREE.Vector3()\n            \n            for (let i=0; i < ogGeo.current.attributes.position.count; i++) {\n                // vertex.fromBufferAttribute(ogGeo.current.attributes.position, i).setLength(1)\n                vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n                let perlin = noise.simplex3(\n                    (vertex.x * 0.7) + (time), // xyz coeff affecting extreme spike appearences when closer to 1\n                    (vertex.y * 0.7)+ (time), // added term is just increasing time\n                    (vertex.z * 0.7)+ (time))\n                let scale = 1 + (perlin * 0.0005) // perlin coefficient affecting drasticness of size change from 1\n                vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n                vertex.multiplyScalar(scale) // keeps increasing or decreasing by scale for some reason\n                // vertex.setLength(scale)\n                position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n                position.needsUpdate = true\n            }\n            geometry.computeVertexNormals();\n\n\n\n\n\n\n\n\n            // ver alpha\n            // let vertex = new THREE.Vector3()\n            // for (let i=0; i < 240; i++) {\n            //     vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n            //     let perlin = noise.simplex3(\n            //         (vertex.x * 0.9) + (time * 0.002), // xyz coeff affecting extreme spike appearences when closer to 1\n            //         (vertex.y * 0.9)+ (time * 0.002), // added term is just increasing time\n            //         (vertex.z * 0.9)+ (time * 0.002))\n            //     let scale = 1 + (perlin * 0.001) // perlin coefficient affecting drasticness of size change from 1\n            //     vertex.multiplyScalar(scale)\n            //     mesh.current.geometry.attributes.position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n            //     mesh.current.geometry.attributes.position.needsUpdate = true\n            //     console.log(mesh.current.geometry.attributes.position.getX(i))\n            // }\n\n            // ver one\n            // const ogPos = ogPosition.current\n            // const curPos = mesh.current.geometry.getAttribute(\"position\"); // Current position of mesh\n            // const newPosArr = Float32Array.from(ogPos.array) // Template of current position to be scaled\n            // for (let vertex=0; vertex<(ogPos.count-3); vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (time * 0.002),\n            //         (y*0.006) + (time * 0.003),\n            //         (z*0.006)\n            //     )\n            //     let ratio = ((perlin * 0.3 ) + 1)\n            //     newPosArr[vertex*3] = ogPos.array[vertex*3] * ratio\n            //     newPosArr[(vertex*3)+1] = ogPos.array[(vertex*3)+1] * ratio\n            //     newPosArr[(vertex*3)+2] = ogPos.array[(vertex*3)+2] * ratio\n            // }\n            // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // console.log('Updated Mesh')\n\n            // ver two\n            // let v3 = new THREE.Vector3()\n            // for (let i=0; i < position.count; i++) {\n            //     v3.fromBufferAttribute(position, i).setLength(3)\n            //     let perlin = noise.simplex3(v3.x + time, v3.y + time, v3.z + time)\n            //     v3.setLength(1 + 0.3 * 3)\n            //     position.setXYZ(i, v3.x, v3.y, v3.z)\n            // }\n            // position.needsUpdate = true;\n            // geometry.computeVertexNormals();\n\n            // ver three\n            // const ogPos = ogPosition.current\n            // const curPos = geometry.getAttribute('position')\n            \n            // for ( let vertIndex = 0; vertIndex < curPos.count; vertIndex++ ) {\n            //     let vertex = new THREE.Vector3()\n            //     vertex.fromBufferAttribute( ogPos, vertIndex )\n\n            //     let perlin = noise.simplex3(\n            //         (vertex.x * 0.006) + (time * 0.0002),\n            //         (vertex.y * 0.006) + (time * 0.0003),\n            //         (vertex.z * 0.006)\n            //     )\n            //     let ratio = 1 + (perlin * 0.4)\n            //     vertex.multiplyScalar( ratio )\n\n            //     mesh.current.geometry.attributes.position.setXYZ(vertIndex, vertex.x, vertex.y, vertex.z)\n            // }\n\n            // position.needsUpdate = true\n            // console.log('UPdated mesh')\n\n        })\n        return (\n          <mesh\n            {...props}\n            ref={mesh}\n            castShadow={true}\n            receiveShadow={false}>\n            <icosahedronBufferGeometry args={[1,12]} /> {/* radius, widthSeg, heightSeg */}\n            <meshStandardMaterial \n                color={0xB5D5FE}\n                roughness={0.6} \n                metalness={0.2} \n                wireframe={false}\n                side={FrontSide} />\n          </mesh>\n        )\n    }\n    \n    \n    return (\n        <div className='bg' id='canvas-container'>\n            {/* default: camera={ fov: 75, near: 0.1, far: 1000, position: [0, 0, 5] } */}\n            <Canvas>\n                <ambientLight intensity={0.3}/>\n                <pointLight intensity={0.8} position={[10, 10, 15]}/>\n                {/* <Sphere position={[0,0,0]} /> */}\n                {/* <Skeleton position={[0,0,0]} /> */}\n                <Plane position={[0,-10,-100]} />\n                <Test position={[2,0,0]} />\n            </Canvas>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}