{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencehan/Documents/GitHub/hanlarry/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport useOnScreen from './hooks/useOnScreen';\nimport { motion } from 'framer-motion';\nimport BackgroundCanvas from './components/background/BackgroundCanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Dark-Mode toggle and respective state\n  const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [darkMode, setDarkMode] = useState(isDarkMode);\n\n  const handleDarkToggle = event => {\n    setDarkMode(prevDarkMode => !prevDarkMode);\n    event.stopPropagation();\n  }; // Scrolling References\n\n\n  const homeRef = useRef(null);\n  const aboutRef = useRef(null);\n  const projectRef = useRef(null);\n  const contactRef = useRef(null); // Scrolling Mechanism\n\n  const handleScroll = target => {\n    var _target$current;\n\n    (_target$current = target.current) === null || _target$current === void 0 ? void 0 : _target$current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"nearest\"\n    });\n  }; // Conditional rendering for homeRef\n\n\n  const homeIsOnScreen = useOnScreen(homeRef);\n\n  const homeLI = () => {\n    const homeRefVariant = {\n      hidden: {\n        x: 5,\n        y: 5,\n        opacity: 0\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        opacity: 1,\n        transition: {\n          ease: \"easeOut\",\n          duration: 1\n        }\n      },\n      hide: {\n        opacity: 0,\n        transition: {\n          ease: \"easeInOut\",\n          duration: 1\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(motion.li, {\n      className: \"li-home\",\n      onClick: () => handleScroll(homeRef),\n      initial: \"hidden\",\n      animate: \"visible\",\n      exit: \"hide\",\n      variants: homeRefVariant,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"nav-item\",\n        children: \"Lawrence Han\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BackgroundCanvas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"rhm7adParTwIq0Nwd5Ww7+stvmY=\", false, function () {\n  return [useOnScreen];\n});\n\n_c = App;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lawrencehan/Documents/GitHub/hanlarry/src/App.tsx"],"names":["React","useState","useRef","useOnScreen","motion","BackgroundCanvas","App","isDarkMode","window","matchMedia","matches","darkMode","setDarkMode","handleDarkToggle","event","prevDarkMode","stopPropagation","homeRef","aboutRef","projectRef","contactRef","handleScroll","target","current","scrollIntoView","behavior","block","inline","homeIsOnScreen","homeLI","homeRefVariant","hidden","x","y","opacity","visible","transition","ease","duration","hide"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,QAAuC,OAAvC;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,MAAT,QAAwC,eAAxC;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;;;AAOA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,UAAP,IAAqBD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAA1F;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAUM,UAAV,CAAxC;;AACA,QAAMM,gBAAgB,GAAIC,KAAD,IAA6B;AACpDF,IAAAA,WAAW,CAAEG,YAAY,IAAI,CAACA,YAAnB,CAAX;AACAD,IAAAA,KAAK,CAACE,eAAN;AACD,GAHD,CAJ4B,CAS5B;;;AACA,QAAMC,OAAO,GAAGf,MAAM,CAAwB,IAAxB,CAAtB;AACA,QAAMgB,QAAQ,GAAGhB,MAAM,CAAwB,IAAxB,CAAvB;AACA,QAAMiB,UAAU,GAAGjB,MAAM,CAAwB,IAAxB,CAAzB;AACA,QAAMkB,UAAU,GAAGlB,MAAM,CAAwB,IAAxB,CAAzB,CAb4B,CAc5B;;AACA,QAAMmB,YAAY,GAAIC,MAAD,IAA0D;AAAA;;AAC7E,uBAAAA,MAAM,CAACC,OAAP,oEAAgBC,cAAhB,CAA+B;AAC7BC,MAAAA,QAAQ,EAAE,QADmB;AAE7BC,MAAAA,KAAK,EAAE,SAFsB;AAG7BC,MAAAA,MAAM,EAAE;AAHqB,KAA/B;AAKD,GAND,CAf4B,CAsB5B;;;AACA,QAAMC,cAAc,GAAGzB,WAAW,CAACc,OAAD,CAAlC;;AACA,QAAMY,MAAM,GAAG,MAAM;AACnB,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcC,QAAAA,OAAO,EAAE;AAAvB,OADa;AAErBC,MAAAA,OAAO,EAAE;AACPH,QAAAA,CAAC,EAAE,CADI;AAEPC,QAAAA,CAAC,EAAE,CAFI;AAGPC,QAAAA,OAAO,EAAE,CAHF;AAIPE,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAE,SADI;AAEVC,UAAAA,QAAQ,EAAE;AAFA;AAJL,OAFY;AAWrBC,MAAAA,IAAI,EAAE;AACJL,QAAAA,OAAO,EAAE,CADL;AAEJE,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAE,WADI;AAEVC,UAAAA,QAAQ,EAAE;AAFA;AAFR;AAXe,KAAvB;AAoBA,wBACI,QAAC,MAAD,CAAQ,EAAR;AACE,MAAA,SAAS,EAAC,SADZ;AAEE,MAAA,OAAO,EAAE,MAAMjB,YAAY,CAACJ,OAAD,CAF7B;AAGE,MAAA,OAAO,EAAC,QAHV;AAIE,MAAA,OAAO,EAAC,SAJV;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,QAAQ,EAAEa,cANZ;AAAA,6BAOI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWD,GAhCD;;AAkCA,sBACE;AAAA,2BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA0BD;;GApFuBxB,G;UAuBCH,W;;;KAvBDG,G;AAoFvB","sourcesContent":["import React, {useState, useRef } from 'react';\nimport './App.css';\nimport useOnScreen from './hooks/useOnScreen';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport BackgroundCanvas from './components/background/BackgroundCanvas';\nimport Home from './pages/home/Home';\nimport About from './pages/about/About';\nimport Projects from './pages/projects/Projects';\nimport Contact from './pages/contact/Contact';\nimport DarkToggle from './components/darkToggle/DarkToggle';\n\nexport default function App() {\n  // Dark-Mode toggle and respective state\n  const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [darkMode, setDarkMode] = useState<boolean>(isDarkMode)\n  const handleDarkToggle = (event:React.ChangeEvent) => {\n    setDarkMode( prevDarkMode => !prevDarkMode )\n    event.stopPropagation()\n  }\n\n  // Scrolling References\n  const homeRef = useRef<null | HTMLDivElement>(null); \n  const aboutRef = useRef<null | HTMLDivElement>(null);\n  const projectRef = useRef<null | HTMLDivElement>(null);\n  const contactRef = useRef<null | HTMLDivElement>(null);\n  // Scrolling Mechanism\n  const handleScroll = (target:React.MutableRefObject<HTMLDivElement | null>) => {\n    target.current?.scrollIntoView({ \n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"nearest\"\n     })\n  }\n  // Conditional rendering for homeRef\n  const homeIsOnScreen = useOnScreen(homeRef);\n  const homeLI = () => {\n    const homeRefVariant = {\n      hidden: { x: 5, y: 5, opacity: 0 },\n      visible: {\n        x: 0,\n        y: 0,\n        opacity: 1,\n        transition: {\n          ease: \"easeOut\",\n          duration: 1,\n        }\n      },\n      hide: {\n        opacity: 0,\n        transition: {\n          ease: \"easeInOut\",\n          duration: 1,\n        }\n      }\n    }\n\n    return (\n        <motion.li \n          className=\"li-home\" \n          onClick={() => handleScroll(homeRef)}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"hide\"\n          variants={homeRefVariant}>\n            <a className=\"nav-item\">Lawrence Han</a>\n        </motion.li>  \n    )\n  }\n\n  return (\n    <>\n      <BackgroundCanvas />\n      {/* <ul className={`navbar ${darkMode && \"dark\"}`}>\n          <AnimatePresence>\n            {!homeIsOnScreen && homeLI()}          \n          </AnimatePresence>  \n          <li onClick={() => handleScroll(aboutRef)}>\n              <a className=\"nav-item\">about</a>\n          </li>\n          <li onClick={() => handleScroll(projectRef)}>\n              <a className=\"nav-item\">experience / projects</a>\n          </li>\n          <li onClick={() => handleScroll(contactRef)}>\n              <a className=\"nav-item\">contact</a>\n          </li>\n      </ul>\n      <div className={`app ${darkMode ? \"dark\" : \"\" }`}>\n        <Home darkMode={darkMode} homeRef={homeRef} />\n        <About darkMode={darkMode} aboutRef={aboutRef} />\n        <Projects darkMode={darkMode} projectRef={projectRef} />\n        <Contact darkMode={darkMode} contactRef={contactRef} />\n      </div>\n      <DarkToggle darkMode={darkMode} handleDarkToggle={handleDarkToggle}/>  */}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}