[{"/Users/lawrencehan/Documents/GitHub/hanlarry/src/index.tsx":"1","/Users/lawrencehan/Documents/GitHub/hanlarry/src/App.tsx":"2","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/home/Home.tsx":"3","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/intro/Intro.tsx":"4","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Glasses.tsx":"5","/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/darkToggle/DarkToggle.tsx":"6","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Disk.tsx":"7","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/home/HomeProfile.tsx":"8","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/home/HomeText.tsx":"9","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Circle.tsx":"10","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/ProfileImg.tsx":"11","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/About.tsx":"12","/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/navbar/Navbar.tsx":"13","/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx":"14","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/contact/Contact.tsx":"15","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/Projects.tsx":"16","/Users/lawrencehan/Documents/GitHub/hanlarry/src/hooks/useOnScreen.tsx":"17","/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin/dist/Perlin.js":"18","/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin/dist/perlinTest.js":"19","/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin.js":"20","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/TitleBlob.tsx":"21","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/TechIcons.tsx":"22","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/techs/techData.tsx":"23","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/DetailBlob.tsx":"24","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Wave.tsx":"25","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/projectCard/projectData.tsx":"26","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/projectCard/ProjectCard.tsx":"27"},{"size":263,"mtime":1651883771071,"results":"28","hashOfConfig":"29"},{"size":3371,"mtime":1652753031795,"results":"30","hashOfConfig":"29"},{"size":1121,"mtime":1652250226514,"results":"31","hashOfConfig":"29"},{"size":2368,"mtime":1650957490214,"results":"32","hashOfConfig":"29"},{"size":3091,"mtime":1651311588105,"results":"33","hashOfConfig":"29"},{"size":927,"mtime":1650875003505,"results":"34","hashOfConfig":"29"},{"size":3938,"mtime":1651310220932,"results":"35","hashOfConfig":"29"},{"size":980,"mtime":1651302407646,"results":"36","hashOfConfig":"29"},{"size":2689,"mtime":1651311628617,"results":"37","hashOfConfig":"29"},{"size":1583,"mtime":1651310530747,"results":"38","hashOfConfig":"29"},{"size":765,"mtime":1651310409740,"results":"39","hashOfConfig":"29"},{"size":4601,"mtime":1652747955778,"results":"40","hashOfConfig":"29"},{"size":703,"mtime":1651390647530,"results":"41","hashOfConfig":"29"},{"size":18600,"mtime":1652257604443,"results":"42","hashOfConfig":"29"},{"size":2378,"mtime":1652755839606,"results":"43","hashOfConfig":"29"},{"size":1511,"mtime":1652776125701,"results":"44","hashOfConfig":"29"},{"size":694,"mtime":1651393132211,"results":"45","hashOfConfig":"29"},{"size":11033,"mtime":1651880716403,"results":"46","hashOfConfig":"29"},{"size":11029,"mtime":1651883141080,"results":"47","hashOfConfig":"29"},{"size":9738,"mtime":1651892270820,"results":"48","hashOfConfig":"29"},{"size":4430,"mtime":1652345975875,"results":"49","hashOfConfig":"29"},{"size":485,"mtime":1652491835512,"results":"50","hashOfConfig":"29"},{"size":920,"mtime":1652491625577,"results":"51","hashOfConfig":"29"},{"size":1749,"mtime":1652747875666,"results":"52","hashOfConfig":"29"},{"size":40430,"mtime":1652752803892,"results":"53","hashOfConfig":"29"},{"size":1163,"mtime":1652776025181,"results":"54","hashOfConfig":"29"},{"size":2425,"mtime":1652777970684,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"147rb72",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"59"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"59"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"59"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"113","usedDeprecatedRules":"59"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"59"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"59"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"59"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"59"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"156"},"/Users/lawrencehan/Documents/GitHub/hanlarry/src/index.tsx",[],[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/App.tsx",["157","158","159","160","161"],[],"import React, {useState, useRef } from 'react';\nimport './App.css';\nimport BackgroundLightMask from './assets/background-mask-light.png'\nimport BackgroundDarkMask from './assets/background-mask-dark-blue.png'\nimport useOnScreen from './hooks/useOnScreen';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Wave from './assets/Wave';\nimport Home from './pages/home/Home';\nimport About from './pages/about/About';\nimport Projects from './pages/projects/Projects';\nimport Contact from './pages/contact/Contact';\nimport DarkToggle from './components/darkToggle/DarkToggle';\n\nexport default function App() {\n  // Dark-Mode toggle and respective state\n  const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [darkMode, setDarkMode] = useState<boolean>(isDarkMode)\n  const handleDarkToggle = (event:React.ChangeEvent) => {\n    setDarkMode( prevDarkMode => !prevDarkMode )\n    event.stopPropagation()\n  }\n\n  // Scrolling References\n  const homeRef = useRef<null | HTMLDivElement>(null); \n  const aboutRef = useRef<null | HTMLDivElement>(null);\n  const projectRef = useRef<null | HTMLDivElement>(null);\n  const contactRef = useRef<null | HTMLDivElement>(null);\n  // Scrolling Mechanism\n  const handleScroll = (target:React.MutableRefObject<HTMLDivElement | null>) => {\n    target.current?.scrollIntoView({ \n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"nearest\"\n     })\n  }\n  // Conditional rendering for homeRef\n  const homeIsOnScreen = useOnScreen(homeRef);\n  const homeLI = () => {\n    const homeRefVariant = {\n      hidden: { x: 5, y: 5, opacity: 0 },\n      visible: {\n        x: 0,\n        y: 0,\n        opacity: 1,\n        transition: {\n          ease: \"easeOut\",\n          duration: 1,\n        }\n      },\n      hide: {\n        opacity: 0,\n        transition: {\n          ease: \"easeInOut\",\n          duration: 1,\n        }\n      }\n    }\n\n    return (\n        <motion.li \n          className=\"li-home\" \n          onClick={() => handleScroll(homeRef)}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"hide\"\n          variants={homeRefVariant}>\n            <a className=\"nav-item\">Lawrence Han</a>\n        </motion.li>  \n    )\n  }\n\n  return (\n    <div className={`main ${darkMode && \"darkMain\"}`} style={{backgroundImage: `url(${darkMode ? BackgroundDarkMask : BackgroundLightMask})`, backgroundSize:'cover'}}>\n      {/* <Wave /> */}\n      <ul className={`navbar ${darkMode && \"dark\"}`}>\n          <AnimatePresence>\n            {!homeIsOnScreen && homeLI()}          \n          </AnimatePresence>  \n          <li onClick={() => handleScroll(aboutRef)}>\n              <a className=\"nav-item\">about</a>\n          </li>\n          <li onClick={() => handleScroll(projectRef)}>\n              <a className=\"nav-item\">experience / projects</a>\n          </li>\n          <li onClick={() => handleScroll(contactRef)}>\n              <a className=\"nav-item\">contact</a>\n          </li>\n      </ul>\n      <div className={`app`}>\n        <Home darkMode={darkMode} homeRef={homeRef} />\n        <About darkMode={darkMode} aboutRef={aboutRef} />\n        <Projects darkMode={darkMode} projectRef={projectRef} />\n        <Contact darkMode={darkMode} contactRef={contactRef} />\n      </div>\n      <DarkToggle darkMode={darkMode} handleDarkToggle={handleDarkToggle}/> \n    </div>\n  );\n};\n","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/home/Home.tsx",["162"],[],"import React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport './home.css';\nimport Glasses from '../../assets/Glasses';\nimport HomeProfile from './HomeProfile';\nimport HomeText from './HomeText';\nimport BackgroundCanvas from '../../components/background/BackgroundCanvas';\n\ninterface Home {\n    darkMode: boolean;\n    homeRef: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport default function Home(props:Home) {\n    const {darkMode, homeRef} = props;\n    const [darkColor, lightColor] = [\"#2A2B2A\", \"#FCF7FF\"]\n\n\n    return (\n        <div className={`home-container page ${darkMode && \"dark\"}`} ref={homeRef}>\n            <motion.div className=\"glasses-container\">\n                <Glasses animated={true} darkMode={props.darkMode}/>\n            </motion.div>\n            <HomeProfile darkMode={darkMode} darkColor={darkColor} lightColor={lightColor}/>\n            <HomeText darkMode={darkMode} darkColor={darkColor} lightColor={lightColor} />\n            <AnimatePresence>\n                <BackgroundCanvas darkMode={darkMode} />\n            </AnimatePresence>\n        </div> \n    )\n};","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/intro/Intro.tsx",[],[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Glasses.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/darkToggle/DarkToggle.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Disk.tsx",["163"],[],"import React from 'react';\nimport { motion } from 'framer-motion';\ninterface Disk {\n    darkMode: boolean;\n    darkColor: string;\n    lightColor: string;\n}\n\n\nexport default function Disk(props:Disk) {\n    const {darkMode, darkColor, lightColor} = props\n    \n    const diskVariant = {\n        hidden: { opacity: 0, y: 100},\n        visible: { \n            opacity: 1, \n            y: -12,\n            transition: {\n                delay: 3.75, \n                type: \"spring\",\n                velocity: 2, // 2 default\n                mass: 4, // 1 default\n                damping: 13, // 10 default\n            }\n        }\n    }\n\n    return (\n        <motion.svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"218\"\n        height=\"120\"\n        fill=\"none\"\n        viewBox=\"0 0 218 120\"\n        className=\"svg-disk\"\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={diskVariant}\n        >\n            <mask id=\"path-1-inside-1_2_4\" fill={darkMode ? lightColor : lightColor}>\n                <path\n                fillRule=\"evenodd\"\n                d=\"M217.979 74.71v.387h-.004C217.475 99.931 168.872 120 108.99 120 49.107 120 .504 99.932.004 75.097H0V44.903h26.928c19.978-9.49 49.335-15.484 82.062-15.484 32.726 0 62.083 5.994 82.061 15.484h26.928V74.71z\"\n                clipRule=\"evenodd\"\n                ></path>\n            </mask>\n            <path\n                fill={darkMode ? darkColor : darkColor}\n                fillRule=\"evenodd\"\n                d=\"M217.979 74.71v.387h-.004C217.475 99.931 168.872 120 108.99 120 49.107 120 .504 99.932.004 75.097H0V44.903h26.928c19.978-9.49 49.335-15.484 82.062-15.484 32.726 0 62.083 5.994 82.061 15.484h26.928V74.71z\"\n                clipRule=\"evenodd\"\n            ></path>\n            <path\n                fill={darkMode ? lightColor : lightColor}\n                d=\"M217.979 75.097v1.415h1.415v-1.415h-1.415zm-.004 0V73.68h-1.387l-.028 1.387 1.415.029zm-217.971 0l1.415-.029-.028-1.387H.004v1.416zm-.004 0h-1.415v1.415H0v-1.415zm0-30.194v-1.415h-1.415v1.415H0zm26.928 0v1.415h.32l.287-.137-.607-1.278zm164.123 0l-.607 1.278.288.137h.319v-1.415zm26.928 0h1.415v-1.415h-1.415v1.415zm-1.415 29.807v.387h2.83v-.387h-2.83zm1.415-1.029h-.004v2.83h.004v-2.83zm-1.419 1.387c-.115 5.72-2.998 11.298-8.387 16.504-5.393 5.21-13.214 9.962-22.962 13.981-19.489 8.035-46.419 13.032-76.221 13.032v2.83c30.08 0 57.393-5.038 77.3-13.245 9.951-4.103 18.117-9.024 23.85-14.562 5.735-5.541 9.115-11.786 9.25-18.483l-2.83-.057zm-107.57 43.517c-29.802 0-56.732-4.997-76.222-13.032-9.748-4.019-17.57-8.771-22.962-13.98-5.39-5.207-8.272-10.785-8.387-16.505l-2.83.057c.135 6.697 3.515 12.942 9.25 18.483 5.733 5.538 13.9 10.459 23.85 14.562 19.907 8.207 47.22 13.245 77.301 13.245v-2.83zM.004 73.681H0v2.83h.004v-2.83zm1.411 1.416v-.387h-2.83v.387h2.83zm0-.387V44.903h-2.83V74.71h2.83zM0 46.318h26.928v-2.83H0v2.83zm27.535-.137c19.738-9.375 48.874-15.347 81.455-15.347v-2.83c-32.872 0-62.45 6.016-82.669 15.62l1.214 2.557zm81.455-15.347c32.58 0 61.716 5.972 81.454 15.347l1.214-2.556c-20.219-9.605-49.797-15.62-82.668-15.62v2.83zm82.061 15.484h26.928v-2.83h-26.928v2.83zm25.513-1.415V74.71h2.83V44.903h-2.83z\"\n                mask=\"url(#path-1-inside-1_2_4)\"\n            ></path>\n            <path\n                fill={darkMode ? darkColor : darkColor}\n                stroke={darkMode ? lightColor : lightColor}\n                strokeWidth=\"1.415\"\n                d=\"M217.272 45.29c0 6.007-2.926 11.793-8.354 17.125-5.429 5.334-13.322 10.17-23.133 14.247-19.618 8.152-46.769 13.211-76.795 13.211-30.027 0-57.178-5.059-76.796-13.21-9.81-4.078-17.704-8.914-23.133-14.248C3.634 57.083.708 51.297.708 45.29c0-6.006 2.926-11.792 8.353-17.124 5.43-5.334 13.322-10.17 23.133-14.247C51.812 5.766 78.963.708 108.99.708c30.026 0 57.177 5.058 76.795 13.21 9.811 4.077 17.704 8.914 23.133 14.248 5.428 5.332 8.354 11.118 8.354 17.124z\"\n            ></path>\n        </motion.svg>   \n    )\n}\n","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/home/HomeProfile.tsx",["164","165","166"],[],"import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Circle from '../../assets/Circle';\nimport ProfileImg from '../../assets/ProfileImg';\nimport Disk from '../../assets/Disk';\ninterface HomeProfile {\n    darkMode: boolean;\n    darkColor: string;\n    lightColor: string;\n}\n\nexport default function HomeProfile(props:HomeProfile) { \n    const {darkMode, darkColor, lightColor} = props;\n    const strokeColor = darkMode ? lightColor : darkColor;\n    return(\n        <motion.div className={`home-col home-profile ${darkMode && \"dark\"}`}>\n            <Circle animated={true} xpos={-70} ypos={-50} darkMode={darkMode} darkColor={darkColor} lightColor={lightColor} />\n            <Circle animated={true} xpos={70} ypos={50} darkMode={darkMode} darkColor={darkColor} lightColor={lightColor} />\n            <ProfileImg />\n            \n            <Disk darkMode={darkMode} darkColor={darkColor} lightColor={lightColor} />\n        </motion.div>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/home/HomeText.tsx",["167","168","169","170","171"],[],"import React from 'react';\nimport { motion } from 'framer-motion';\nimport Disk from '../../assets/Disk';\ninterface HomeText {\n    darkMode: boolean;\n    darkColor: string;\n    lightColor: string;\n}\ninterface AnimatedLetters {\n    title: string;\n    className: string;\n    highlight?: boolean;\n}\n\n// Variants for framer-motion\nconst textBanner = {\n    visible: { \n        transition: {\n            delayChildren: 7.2,\n            staggerChildren: 0.05\n        }\n    }\n};\nconst textLetter_01 = {\n    hidden: { y: -200, opacity: 0 },\n    visible: {\n        y: 0,\n        opacity: 1,\n        transition: {\n            ease: [0.33, 1, 0.68, 1],\n            duration: 1\n        } \n    }\n};\nconst textLetter_02 = {\n    hidden: { opacity: 0, x: 10 },\n    visible: {\n        opacity: 1,\n        x: 0,\n        transition: {\n            ease: \"easeOut\",\n            duration: 0.25\n        } \n    }\n};\nconst textHighlight = {\n    hidden: { y: 50, opacity: 0, rotate: 0},\n    visible: {\n        y: 0,\n        opacity: 1,\n        rotate: -3,\n        transition: {\n            ease: \"easeOut\",\n            duration: 1.5,\n            delay: 9,\n        } \n    }\n};\n\n// Component for animated letter banner\nconst AnimatedLetters = (props:AnimatedLetters) => {\n    const {title, className, highlight} = props;\n    const titleCheck = (className === \"home-text-title\")\n    return (\n        <motion.span\n            className={`home-text ${className}`}\n            >\n            {[...title].map( (letter) => (\n                <motion.span\n                    className=\"letter\"\n                    variants={titleCheck ? textLetter_01: textLetter_02}>\n                    {(letter === ' ') ? '\\u00A0' : letter}\n                    {(letter === \"L\" && highlight) && \n                        <motion.span\n                            className=\"highlightBox\"\n                            variants={textHighlight}>\n                                &nbsp;\n                        </motion.span>\n                    }\n                </motion.span>\n            ))}\n        </motion.span>\n    )}\n\nexport default function HomeText(props:HomeText) { \n    const {darkMode, darkColor, lightColor} = props;\n\n    return(\n        <motion.div className={`home-col home-text-col ${darkMode && \"dark\"}`}\n            variants={textBanner}\n            initial='hidden'\n            animate='visible'\n        >\n            <AnimatedLetters title={\"HI, WELCOME\"} className={\"home-text-title\"} />\n            <AnimatedLetters title={\"my name is Lawrence Han\"} className={\"home-text-intro\"} highlight={true}/>\n            <AnimatedLetters title={\"I am an engineer . . . \"} className={\"home-text-passage\"} />\n        </motion.div>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Circle.tsx",["172"],[],"import React from 'react';\nimport { motion } from 'framer-motion';\ninterface Circle {\n    animated: boolean;\n    darkMode: boolean;\n    darkColor: string;\n    lightColor: string;\n    xpos: number;\n    ypos: number;\n}\n\nexport default function Circle(props:Circle) {\n    const {darkMode, animated, darkColor, lightColor, xpos, ypos} = props;\n    const strokeColor = darkMode ? lightColor : darkColor;\n    const strokeTransition = {\n        delay: 4,\n        duration: 5,\n        ease: [0.6, 0.01, -0.05, 0.95]\n    };\n    const circleTransition = {\n        delay: 4,\n        repeat: Infinity,\n        repeatType: undefined,\n        duration: 8,\n        ease: \"easeInOut\",\n    }\n    const circleVariant = {\n        hidden: { x: xpos, y: ypos, },\n        visible: {\n            x: [xpos, xpos*1.2, xpos, xpos*0.8, xpos],\n            y: [ypos, ypos*-1, ypos, ypos*-1, ypos],\n            transition: circleTransition,\n        }\n    }\n\n    \n    return (\n        <motion.svg className=\"svg-circle\" height=\"300\" width=\"300\"\n            initial=\"hidden\"\n            animate=\"visible\"\n            variants={!animated ? undefined : circleVariant}\n        >\n            <motion.circle \n                cx=\"150\" \n                cy=\"150\" \n                r=\"150\" \n                fill=\"none\" \n                stroke={strokeColor} \n                stroke-width=\"1\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: 1 }}\n                transition={!animated ? undefined : strokeTransition}\n                >\n            </motion.circle>\n        </motion.svg>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/ProfileImg.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/About.tsx",["173"],[],"import React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport TitleBlob from './TitleBlob';\nimport DetailBlob from './DetailBlob';\nimport TechIcons from './TechIcons';\nimport techData from '../../assets/techs/techData';\nimport './about.css';\n\ninterface About {\n    darkMode: boolean;\n    aboutRef?: React.MutableRefObject<HTMLDivElement | null>;\n}\n\n// Left Column About-Blurb\nconst AboutBlurb = (props:About) => {\n    const { darkMode } = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n    }, [controls, inView])\n\n    const blurbTitle = {\n        hidden: { opacity: 0 },\n        visible: {\n            opacity: 1,\n            transition: {\n                duration: 2,\n                ease: \"easeInOut\"\n            }   \n        }\n    }\n    const blurbText = {\n        hidden: { opacity: 0, y: -110 },\n        visible: {\n            y: 0,\n            opacity: 1,\n            transition: {\n                delay: 1.5,\n                duration: 3,\n                ease: \"easeOut\"\n            }   \n        }\n    }\n\n    return (\n        <div className='about-blurb about-col'>\n            <motion.div className={`blurb-title ${darkMode && \"dark\"}`}\n            ref={ref}\n            initial=\"hidden\"\n            animate={controls}\n            variants={blurbTitle}>\n                about me\n            </motion.div>\n            <motion.div className={`blurb-text ${darkMode && \"dark\"}`}\n            initial=\"hidden\"\n            animate={controls}\n            variants={blurbText}>\n                <p>\n                    I’m an engineer based in San Francisco, CA - specializing in data anlaysis and regenerative-biomaterial therapeutics. I graduated from the University of Virginia with a BS In biomedical-engineering, and a minor in computer science. \n                </p>\n                <p>\n                    <br></br>somethingsomething on learning to code because of lab web/photography, then because of realizing how i could speed up data insights by using code at tempo, \n                </p>\n                <p>\n                    <br></br>somesomething about while having experience in the lab, passion in building software projects that complenemtn and boost research. \n                </p>\n            </motion.div>\n        </div>\n    )\n}\n\n// Right Column About-Tech summary\nconst AboutDetail = (props:About) => {\n    const { darkMode } = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n\n    const techs = techData.map(tech => {\n        return (\n            <TechIcons\n                name={tech.name}\n                icon={tech.icon}\n                iconDarkMode={tech.iconDarkMode}\n                darkMode={darkMode}\n            />\n        )\n    })\n\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n    }, [controls, inView])\n\n    const textVariants = {\n        hidden: { opacity: 0 },\n        visible: {\n            opacity: 1,\n            transition: {\n                delay: 2,\n                duration: 2,\n                ease: 'easeInOut'\n            }\n        }\n    }\n    const iconVariants = {\n        hidden: { opacity: 0, y: 50 },\n        visible: {\n            opacity: 1,\n            y: 0,\n            transition: {\n                delay: 2,\n                duration: 2,\n                ease: 'easeOut'\n            }\n        }\n    }\n\n    return (\n        <div className='about-detail about-col'>\n            <motion.div className='detail-title'>\n                <TitleBlob darkMode={darkMode} />\n                <motion.p className={`title-text ${darkMode && \"dark\"}`}\n                ref={ref}\n                initial=\"hidden\"\n                animate={controls}\n                variants={textVariants}>\n                    technologies I've worked with\n                </motion.p>\n            </motion.div>\n            <motion.div className='detail-techs'\n            initial=\"hidden\"\n            animate={controls}\n            variants={iconVariants}>\n                {techs}\n            </motion.div>\n            <DetailBlob darkMode={darkMode} />\n        </div>\n    )\n}\n\nexport default function About(props:About) {\n    const {darkMode, aboutRef} = props;\n    return (\n        <div className={`about page ${darkMode && \"dark\"}`} ref={aboutRef}>\n            <AboutBlurb darkMode={darkMode} />\n            <AboutDetail darkMode={darkMode} />\n        </div>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/navbar/Navbar.tsx",["174"],[],"import React from 'react';\nimport { motion } from 'framer-motion';\ninterface Navbar {\n    darkMode: boolean;\n    handleScroll: (target: React.MutableRefObject<HTMLDivElement | null>) => void;\n    allRefs: ;\n    isScrolled?: boolean;\n}\n\nexport default function Navbar(props:Navbar) {\n    const {darkMode, handleScroll, allRefs} = props;\n    const [homeRef, aboutRef, projectRef, contactRef] = allRefs;\n\n    const homeLI = () => {\n        return (\n            <li onClick={() => handleScroll(homeRef)}>\n                <a className=\"nav-item\">Lawrence Han</a>\n            </li>  \n        )\n    }\n\n    return (\n        <ul className={`navbar ${darkMode && \"dark\"}`}>\n            <li onClick={() => handleScroll(aboutRef)}>\n                <a className=\"nav-item\">about</a>\n            </li>\n            <li onClick={() => handleScroll(projectRef)}>\n                <a className=\"nav-item\">experience / projects</a>\n            </li>\n            <li onClick={() => handleScroll(contactRef)}>\n                <a className=\"nav-item\">contact</a>\n            </li>\n        </ul>\n    )\n}",[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/components/background/BackgroundCanvas.tsx",["175","176","177","178"],[],"import React, { useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three';\nimport { DoubleSide, FrontSide } from 'three';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './background.css';\nimport { noise } from '../../Perlin';\ninterface bgCanvas {\n    darkMode: boolean;\n}\n\nexport default function BackgroundCanvas(props:bgCanvas) {\n    const { darkMode } = props\n    const [darkColor, lightColor] = [0x2A2B2A, 0xFCF7FF]\n    \n    // Variants framer-motion\n    const variants = {\n        hidden: { y: 300, opacity: 0 },\n        visible: {\n            y: 0,\n            opacity: 1,\n            transition: {\n                ease: \"easeInOut\",\n                duration: 2,\n                delay: 7,\n            }\n        },\n        hide: {\n            opacity: 0,\n            x: 300,\n            transition: {\n                ease: \"easeInOut\",\n                duration: 2,\n            }\n        }\n    }\n\n\n    // When forming a MESH with useFrame(), it must be its own component, outside of App()\n    function Sphere(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame((state, delta) => (mesh.current.rotation.x += 0.01))\n        useFrame((state, delta) => (mesh.current.rotation.y += 0.01))\n        return (\n          <mesh\n            {...props}\n            ref={mesh}>\n            <sphereGeometry args={[1,128,128]} /> {/* radius, widthSeg, heightSeg */}\n            <meshNormalMaterial />\n          </mesh>\n        )\n    }\n\n    function Skeleton(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        useFrame(() => (mesh.current.rotation.x += 0.002))\n        useFrame(() => (mesh.current.rotation.y += 0.002))\n        return (\n            <mesh\n                {...props}\n                ref={mesh}>\n                <icosahedronGeometry args={[1.1, 2]} />  {/* radius, detail */}\n                <meshPhongMaterial color={darkMode ? lightColor:darkColor} wireframe={true} wireframeLinewidth={200} side={DoubleSide} />\n            </mesh>\n        )\n    }\n    function BackgroundPlane(props: JSX.IntrinsicElements['mesh']) {\n        const meshPlane = useRef<THREE.Mesh>(null!)\n        return (\n            <mesh\n                {...props}\n                receiveShadow\n                ref={meshPlane}>\n                <planeGeometry attach=\"geometry\" args={[1000, 1000]} />\n                <meshStandardMaterial attach=\"material\" color={darkMode ? darkColor:lightColor} side={DoubleSide} transparent={true} opacity={0.3} />\n            </mesh>\n        )\n    }\n    function BlurPlane(props: JSX.IntrinsicElements['mesh']) {\n        const meshPlane = useRef<THREE.Mesh>(null!)\n        useEffect(() => {\n            // meshPlane.current.rotation.x = Math.PI / 4 * -1\n        })\n\n        return (\n            <mesh\n                {...props}\n                ref={meshPlane}>\n                <planeGeometry attach=\"geometry\" args={[1000, 1000]} />\n                <meshStandardMaterial attach=\"material\" color={lightColor} side={DoubleSide} transparent={true} opacity={0.0} />\n            </mesh>\n        )\n    }\n\n    function Test(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        // let ogPosition = useRef<THREE.BufferAttribute | THREE.InterleavedBufferAttribute>(null!)\n        let ogGeo = useRef<THREE.BufferGeometry>(null!)\n\n        // Saving original position as a reference\n        useEffect(() => {\n            // const { geometry } = mesh.current\n            // const { position } = geometry.attributes // vertices of geometry\n            // ogPosition.current = position // Saved here as mesh is not declared yet outside\n            const { geometry } = mesh.current\n            ogGeo.current = geometry  \n        }, [])\n\n\n        // Rotating animation\n        useFrame(({ clock }) => {\n            // const time = clock.getElapsedTime()\n            mesh.current.rotation.x -= 0.005\n            mesh.current.rotation.y -= 0.01\n        })\n        console.log('Render Check')\n        // Accessing vertices\n        useEffect(() => {\n            // const { geometry } = mesh.current\n            // const { position } = geometry.attributes // vertices of geometry\n\n            // // WORKING\n            // console.log('ogGeo before')\n            // console.log(ogGeo.current.attributes.position)\n            // console.log('mesh before')\n            // console.log(mesh.current.geometry.attributes.position)\n            // let vertex = new THREE.Vector3()\n            // for (let i=0; i < 240; i++) {\n            //     vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n            //     console.log('Vertex before:')\n            //     console.log(vertex)\n            //     console.log('Vertex X val')\n            //     console.log(vertex.x)\n            //     console.log(noise.simplex3(0.5, 1, 0.5))\n            //     let perlin = noise.simplex3(\n            //         (vertex.x * 0.9) + (6000000000), // xyz coeff affecting extreme spike appearences when closer to 1\n            //         (vertex.y * 0.9)+ (6000000000), // added term is just increasing time\n            //         (vertex.z * 0.9)+ (6000000000))\n            //     let scale = 1 + (perlin * 0.1) // perlin coefficient affecting drasticness of size change from 1\n            //     vertex.multiplyScalar(scale)\n            //     console.log('Vertex after')\n            //     console.log(vertex)\n            //     console.log('Vertex X val')\n            //     console.log(vertex.x)\n\n            //     mesh.current.geometry.attributes.position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n            //     // mesh.current.geometry.attributes.position.needsUpdate = true\n            //     console.log(mesh.current.geometry.attributes.position.getX(i))\n            // }\n            // mesh.current.geometry.attributes.position.needsUpdate = true\n            // console.log('ogGeo after')\n            // console.log(ogGeo.current.attributes.position)\n            // console.log('mesh after')\n            // console.log(mesh.current.geometry.attributes.position)\n            \n\n            // ogPosition.current = position // Held constant as an OG reference\n\n            // /// testing area\n            // const ogPos = ogPosition.current\n            // const newPos = mesh.current.geometry.getAttribute(\"position\"); // Current state\n            // const newPosArr = Float32Array.from(newPos.array) // Copy of Current\n            // console.log(\"-- START -- \")\n            // console.log('OG Array' + ogPos.array)    \n            // console.log('Mesh Current' + newPos.array)    \n            // console.log('Mesh Current Copy' + newPosArr.slice(0,5))\n            // for (let vertex=0; vertex<ogPos.count; vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (0 * 0.0005),\n            //         (y*0.006) + (0 * 0.0005),\n            //         (z*0.006)\n            //     )\n            //     let ratio = ((perlin * 0.3 *0.1) + 0.8)\n            //     newPosArr[vertex*3] = newPosArr[vertex*3] * ratio\n            //     newPosArr[(vertex*3)+1] = newPosArr[(vertex*3)+1] * ratio\n            //     newPosArr[(vertex*3)+2] = newPosArr[(vertex*3)+2] * ratio\n            // }\n            // console.log(\"-- After Loop -- \")\n            // console.log('OG Array' + ogPos.array)    \n            // console.log('Mesh Current' + newPos.array)    \n            // console.log('Mesh Current Copy' + newPosArr.slice(0,5))\n            // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // const finalArr = mesh.current.geometry.getAttribute(\"position\").array\n            // console.log(finalArr)\n\n            // const ogPos = ogPosition.current\n            // const curPos = mesh.current.geometry.getAttribute(\"position\"); // Current position of mesh\n            // const newPosArr = Float32Array.from(ogPos.array) // Template of current position to be scaled\n            // console.log(newPosArr)\n            // for (let vertex=0; vertex<ogPos.count; vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (1 * 0.0002),\n            //         (y*0.006) + (1 * 0.0003),\n            //         (z*0.006)\n            //     )\n                \n            //     let ratio = ((perlin * 0.3 ) + 1)\n            //     newPosArr[vertex*3] = newPosArr[vertex*3] * ratio\n            //     newPosArr[(vertex*3)+1] = newPosArr[(vertex*3)+1] * ratio\n            //     newPosArr[(vertex*3)+2] = newPosArr[(vertex*3)+2] * ratio\n            // }\n            // console.log(mesh.current.geometry.getAttribute('position'))\n            // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // console.log(mesh.current.geometry.getAttribute('position'))\n            // console.log('Updated Mesh')\n\n            \n        }, [])\n\n        useFrame(({ clock }) => {\n            const time = clock.getElapsedTime()\n            const { geometry } = mesh.current\n            const { position } = geometry.attributes // vertices of geometry\n\n            // // WORKING part 1\n            let vertex = new THREE.Vector3()\n            \n            for (let i=0; i < ogGeo.current.attributes.position.count; i++) {\n                // vertex.fromBufferAttribute(ogGeo.current.attributes.position, i).setLength(1)\n                vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n                let perlin = noise.simplex3(\n                    (vertex.x * 0.7) + (time), // xyz coeff affecting extreme spike appearences when closer to 1\n                    (vertex.y * 0.7)+ (time), // added term is just increasing time\n                    (vertex.z * 0.7)+ (time))\n                let scale = 1 + (perlin * 0.0005) // perlin coefficient affecting drasticness of size change from 1\n                vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n                vertex.multiplyScalar(scale) // keeps increasing or decreasing by scale for some reason\n                // vertex.setLength(scale)\n                position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n                position.needsUpdate = true\n            }\n            geometry.computeVertexNormals();\n\n\n\n\n\n\n\n\n            // ver alpha\n            // let vertex = new THREE.Vector3()\n            // for (let i=0; i < 240; i++) {\n            //     vertex.fromBufferAttribute(ogGeo.current.attributes.position, i)\n            //     let perlin = noise.simplex3(\n            //         (vertex.x * 0.9) + (time * 0.002), // xyz coeff affecting extreme spike appearences when closer to 1\n            //         (vertex.y * 0.9)+ (time * 0.002), // added term is just increasing time\n            //         (vertex.z * 0.9)+ (time * 0.002))\n            //     let scale = 1 + (perlin * 0.001) // perlin coefficient affecting drasticness of size change from 1\n            //     vertex.multiplyScalar(scale)\n            //     mesh.current.geometry.attributes.position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n            //     mesh.current.geometry.attributes.position.needsUpdate = true\n            //     console.log(mesh.current.geometry.attributes.position.getX(i))\n            // }\n\n            // ver one\n            // const ogPos = ogPosition.current\n            // const curPos = mesh.current.geometry.getAttribute(\"position\"); // Current position of mesh\n            // const newPosArr = Float32Array.from(ogPos.array) // Template of current position to be scaled\n            // for (let vertex=0; vertex<(ogPos.count-3); vertex++) {\n            //     let x = ogPos.array[vertex*3] // Unlike THREE.vector3 types, vertices are not objects with .x.y.z\n            //     let y = ogPos.array[(vertex*3)+1] // three-fiber has the vertex values in one array\n            //     let z = ogPos.array[(vertex*3)+2]\n            //     let perlin = noise.simplex3(\n            //         (x*0.006) + (time * 0.002),\n            //         (y*0.006) + (time * 0.003),\n            //         (z*0.006)\n            //     )\n            //     let ratio = ((perlin * 0.3 ) + 1)\n            //     newPosArr[vertex*3] = ogPos.array[vertex*3] * ratio\n            //     newPosArr[(vertex*3)+1] = ogPos.array[(vertex*3)+1] * ratio\n            //     newPosArr[(vertex*3)+2] = ogPos.array[(vertex*3)+2] * ratio\n            // }\n            // mesh.current.geometry.setAttribute('position', new THREE.BufferAttribute(newPosArr, 3));\n            // mesh.current.geometry.attributes.position.needsUpdate = true;\n            // console.log('Updated Mesh')\n\n            // ver two\n            // let v3 = new THREE.Vector3()\n            // for (let i=0; i < position.count; i++) {\n            //     v3.fromBufferAttribute(position, i).setLength(3)\n            //     let perlin = noise.simplex3(v3.x + time, v3.y + time, v3.z + time)\n            //     v3.setLength(1 + 0.3 * 3)\n            //     position.setXYZ(i, v3.x, v3.y, v3.z)\n            // }\n            // position.needsUpdate = true;\n            // geometry.computeVertexNormals();\n\n            // ver three\n            // const ogPos = ogPosition.current\n            // const curPos = geometry.getAttribute('position')\n            \n            // for ( let vertIndex = 0; vertIndex < curPos.count; vertIndex++ ) {\n            //     let vertex = new THREE.Vector3()\n            //     vertex.fromBufferAttribute( ogPos, vertIndex )\n\n            //     let perlin = noise.simplex3(\n            //         (vertex.x * 0.006) + (time * 0.0002),\n            //         (vertex.y * 0.006) + (time * 0.0003),\n            //         (vertex.z * 0.006)\n            //     )\n            //     let ratio = 1 + (perlin * 0.4)\n            //     vertex.multiplyScalar( ratio )\n\n            //     mesh.current.geometry.attributes.position.setXYZ(vertIndex, vertex.x, vertex.y, vertex.z)\n            // }\n\n            // position.needsUpdate = true\n            // console.log('UPdated mesh')\n\n        })\n        return (\n          <mesh\n            {...props}\n            ref={mesh}\n            castShadow\n            receiveShadow={false}>\n            <sphereBufferGeometry args={[1,128,128]} /> {/* radius, widthSeg, heightSeg */}\n            <meshStandardMaterial \n                color={0xB5D5FE}\n                roughness={0.6} \n                metalness={0.2} \n                wireframe={false}\n                side={FrontSide} />\n          </mesh>\n        )\n    }\n\n    function Blob(props: JSX.IntrinsicElements['mesh']) {\n        const mesh = useRef<THREE.Mesh>(null!)\n        let ogGeo = useRef<THREE.BufferGeometry>(null!)\n\n        // Saving original position as a reference\n        useEffect(() => {\n            const { geometry } = mesh.current\n            ogGeo.current = geometry  \n        }, [])\n\n\n        // Rotating animation\n        useFrame(() => {\n            mesh.current.rotation.x += 0.005\n            mesh.current.rotation.y -= 0.005\n        })\n\n        // Perlin noise animation\n        useFrame(({ clock }) => {\n            const time = clock.getElapsedTime() // For incrementing perlin noise calc\n            const { geometry } = mesh.current\n            const { position } = geometry.attributes // to access vertices of geometry\n\n            let vertex = new THREE.Vector3() // placeholder for new vertex vals\n            for (let i=0; i < ogGeo.current.attributes.position.count; i++) {\n                vertex.fromBufferAttribute(ogGeo.current.attributes.position, i) // copying original geometry\n                let perlin = noise.simplex3(\n                    (vertex.x * 1.1) + (time * 1), // vertex coeffs __\n                    (vertex.y * 1.1)+ (time * 1), // time component will affect incrementing steps and spike variance\n                    (vertex.z * 1.1)+ (time * 1))\n                let ratio = 1 + (perlin * 0.0002) // perlin ceoff affects range of change from baseline 1\n                vertex.multiplyScalar(ratio)\n                position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n                position.needsUpdate = true\n            }\n            geometry.computeVertexNormals();\n        })\n        return (\n          <mesh\n            {...props}\n            ref={mesh}\n            castShadow\n            receiveShadow={false}>\n            <sphereBufferGeometry args={[ 1.4, 128, 128 ]} /> {/* radius, widthSeg, heightSeg */}\n            <meshStandardMaterial \n                color={0xB5D5FE}\n                roughness={0.6} \n                metalness={0.2} \n                wireframe={false}\n                side={FrontSide} />\n          </mesh>\n        )\n    }\n    \n    return (\n        <motion.div className='bg' id='canvas-container'\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hide\"\n            variants={variants}\n        >\n            {/* default: camera={ fov: 75, near: 0.1, far: 1000, position: [0, 0, 5] } */}\n            <Canvas\n            shadows\n            >\n                {/* <color attach=\"background\" args={} /> */}\n                {/* <ambientLight intensity={0.1}/> */}\n                <pointLight intensity={0.3} position={[150, 150, 15]}/>\n                <directionalLight color={ 0x0099FA } intensity={ 0.8 } position={[ 0, 350, 350 ]} castShadow={true} />\n                <directionalLight color= { 0x62C7B7 } intensity={ 0.4 } position={[ -300, 400, 350 ]} />\n                <directionalLight color= { 0x62C7B7 } intensity={ 0.3 } position={[ 0, -250, 300 ]} />\n                <hemisphereLight color={ 0xffffff } groundColor={ 0x000000 } intensity={ 0.8 } />\n                {/* <Sphere position={[0,0,0]} /> */}\n                <Skeleton position={[.75,0,1]} />\n                {/* <BlurPlane position={[ 0, 0, 3 ]}/> */}\n                <Blob position={[ 1.75, -0.5, 0 ]} />\n            </Canvas>\n        </motion.div>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/contact/Contact.tsx",["179","180","181","182"],[],"import React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport './contact.css';\n\ninterface Contact {\n    darkMode: boolean;\n    contactRef: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport default function Contact(props:Contact) {\n    const { darkMode, contactRef } = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n    }, [controls, inView])\n\n    const variants = {\n        hidden: {\n            opacity: 0,\n        },\n        visible: {\n            opacity: 0.6,\n            transition: {\n                duration: 1,\n                ease: \"easeInOut\"\n            }\n        }\n    }\n\n    return (\n        <div className={`contact page ${darkMode && \"dark\"}`}\n        ref={contactRef}\n        >\n            <a href=\"https://github.com/lawrencehhan\" className=\"icon-wrapper\" target=\"_blank\" ref={ref}>\n                <motion.img \n                    src={require(`../../assets/contact/${darkMode ? \"githubDM.png\" : \"github.png\"}`)} \n                    className='contact-icon' \n                    alt=\"Github\"\n                    initial=\"hidden\"\n                    animate={controls}\n                    variants={variants}\n                />\n            </a>\n            <a href=\"https://www.linkedin.com/in/lawrence-han-332505206/\" className=\"icon-wrapper\" target=\"_blank\">\n                <motion.img \n                    src={require(`../../assets/contact/${darkMode ? \"linkedinDM.png\" : \"linkedin.png\"}`)} \n                    className='contact-icon' \n                    alt=\"LinkedIn\"\n                    initial=\"hidden\"\n                    animate={controls}\n                    variants={variants}\n                />\n            </a>\n            <a href=\"https://www.instagram.com/han.larry/\" className=\"icon-wrapper\" target=\"_blank\">\n                <motion.img \n                    src={require(`../../assets/contact/${darkMode ? \"instagramDM.png\" : \"instagram.png\"}`)} \n                    className='contact-icon' \n                    alt=\"Instagram\"\n                    initial=\"hidden\"\n                    animate={controls}\n                    variants={variants}\n                />\n            </a>\n        </div>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/Projects.tsx",["183","184"],[],"import React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport projectData from './projectCard/projectData';\nimport ProjectCard from './projectCard/ProjectCard';\nimport './projects.css';\n\ninterface Projects {\n    darkMode: boolean;\n    projectRef: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport default function Projects(props:Projects) {\n    const {darkMode, projectRef} = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n    useEffect(() => {\n        if (inView) {\n            controls.start(\"visible\")\n        }\n    }, [controls, inView])\n\n    const cards = projectData.map((proj, i) => {\n        return (\n            <ProjectCard \n                id={proj.id}\n                title={proj.title}\n                text={proj.text}\n                techList={proj.techList}\n                image={proj.image}\n                blob={proj.blob}\n                link={proj.link}\n                darkMode={darkMode}\n            />\n        )\n    })\n\n    return (\n        <div className={`projects page ${darkMode && \"dark\"}`} ref={projectRef}>\n            <motion.div className='projects-main-title'>\n                my{`\\u00A0`}<span className={`title-highlight first ${darkMode && \"dark\"}`}>experience</span>{`\\u00A0`}and{`\\u00A0`}<span className={`title-highlight ${darkMode && \"dark\"}`}>projects</span>\n            </motion.div>\n            {cards}\n        </div>\n    )\n}","/Users/lawrencehan/Documents/GitHub/hanlarry/src/hooks/useOnScreen.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin/dist/Perlin.js",[],[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin/dist/perlinTest.js",[],[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/Perlin.js",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/TitleBlob.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/TechIcons.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/techs/techData.tsx",["185"],[],"export default [\n    {\n        name: 'python',\n        icon: 'python.png',\n        iconDarkMode: 'pythonDM.png'\n    },\n    {\n        name: 'pandas',\n        icon: 'pandas.png',\n        iconDarkMode: 'pandasDM.png'\n    },\n    {\n        name: 'git',\n        icon: 'git.png',\n        iconDarkMode: 'gitDM.png'\n    },\n    {\n        name: 'reactjs',\n        icon: 'reactjs.png',\n        iconDarkMode: 'reactjsDM.png'\n    },\n    {\n        name: 'javascript',\n        icon: 'js.png',\n        iconDarkMode: 'jsDM.png'\n    },\n    {\n        name: 'html5',\n        icon: 'html5.png',\n        iconDarkMode: 'html5DM.png'\n    },\n    {\n        name: 'css',\n        icon: 'css.png',\n        iconDarkMode: 'cssDM.png'\n    },\n    {\n        name: 'bootstrap5',\n        icon: 'bootstrap5.png',\n        iconDarkMode: 'bootstrap5DM.png'\n    },\n    {\n        name: 'sass',\n        icon: 'sass.png',\n        iconDarkMode: 'sassDM.png'\n    },\n]","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/about/DetailBlob.tsx",["186"],[],"import React, { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\ninterface Blob {\n    darkMode: boolean;\n  }\n\nexport default function DetailBlob(props:Blob) {\n    const { darkMode } = props;\n    const controls = useAnimation();\n    const { ref, inView } = useInView();\n    useEffect(() => {\n      if (inView) {\n        controls.start(\"visible\")\n      }\n    }, [controls, inView])\n\n    const blobTransition = {\n      delay: 2,\n      duration: 8,\n      repeat: Infinity,\n      repeatType: undefined,\n    }\n    const ypos = 12\n    const variants = {\n      hidden: { opacity: 0, y: ypos },\n      // visible: {\n      //     opacity: [1, 1, 1, 1, 1],\n      //     y: [ypos, ypos*-1, ypos, ypos*-1, ypos],\n      //     transition: blobTransition,\n      // }\n      visible: {\n        opacity: 1,\n        y: 0,\n        transition: {\n          delay: 2,\n          duration: 2,\n        },\n      }\n    }\n\n    return (\n      <motion.svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"695\"\n        height=\"560\"\n        fill=\"none\"\n        viewBox=\"0 0 695 560\"\n        className=\"detail-blob\"\n        ref={ref}\n        initial='hidden'\n        animate={controls}\n        variants={variants}\n      >\n        <path\n          stroke={darkMode ? \"#FCF7FF\" : \"#2A2B2A\"}\n          d=\"M353.968 3.903C446.219-.58 546.929-8.567 611.906 57.068c71.701 72.428 97.564 182.313 73.122 281.252-23.975 97.05-100.543 173.637-194.16 208.706-84.539 31.668-171.019-5.61-254.17-40.761-91.406-38.64-205.452-68.11-230.506-164.13-25.451-97.54 47.194-191.161 119.46-261.444C186.211 21.794 269.59 8 353.968 3.903z\"\n          clipRule=\"evenodd\"\n        ></path>\n      </motion.svg>\n    );\n  }","/Users/lawrencehan/Documents/GitHub/hanlarry/src/assets/Wave.tsx",[],[],"/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/projectCard/projectData.tsx",["187"],[],"export default [\n    {\n        id: 1,\n        title: \"Synestify\",\n        text: \"Synestify analyzes a user-uploaded image and user-inputted information to recommend songs curated to reflect the image's visual cues and user's interests. The analysis matches tonal, hue, brightness, user-data, etc. to musical values accepted by Spotify's public API to utilize Spotify's recommendation engine.\",\n        techList: ['Python', 'Flask', 'Pandas', 'Scikit-learn', 'Plotly', 'Spotify API'],\n        image: \"synestify_example.png\",\n        blob: \"blob_01.png\",\n        link: \"https://github.com/lawrencehhan/synestify\",\n    },\n    {\n        id: 2,\n        title: 'Synestify',\n        text: \"Synestify analyzes a user-uploaded image and user-inputted information to recommend songs curated to reflect the image's visual cues and user's interests. The analysis matches tonal, hue, brightness, user-data, etc. to musical values accepted by Spotify's public API to utilize Spotify's recommendation engine.\",\n        techList: ['Python', 'Flask', 'Pandas', 'Scikit-learn', 'Plotly', 'Spotify API'],\n        image: \"synestify_example.png\",\n        blob: 'blob_01.png',\n    },\n]","/Users/lawrencehan/Documents/GitHub/hanlarry/src/pages/projects/projectCard/ProjectCard.tsx",["188","189","190","191"],[],"import React from 'react';\nimport { motion } from 'framer-motion';\ninterface Card {\n    darkMode: boolean;\n    id: number;\n    title: string;\n    text: string;\n    techList: string[];\n    image: string;\n    blob: string;\n    link?: string;\n}\n\n\nexport default function ProjectCard(props:Card) {\n    const { darkMode, id, title, text, techList, blob, image, link } = props;\n    let odd:boolean = ( id % 2 !== 0 )\n    console.log(id)\n    console.log(odd)\n\n    // Card is split into image section and text section\n    // // 'odd' will alternate order of the two sections per card\n    const CardImage = ({blob, image}) => {\n        return (\n            <div className=\"card-image-wrap\">\n                <img \n                    src={require(`./projectBlobs/${blob}`)}\n                    className={`card-image blob ${odd ? \"odd-blob\" : \"even-blob\"}`}\n                    alt=\"blob\"\n                />\n                <a href={link} target=\"_blank\" className=\"card-image card-link\">\n                    <img \n                        src={require(`./projectImages/${image}`)}\n                        className=\"example\"\n                        alt=\"card-image\"\n                    />\n                </a>\n            </div>\n        )\n    }\n    const CardText = ({title, text, techList, link}) => {\n        const usedTech = techList.map((tech, i) => {\n            let lastCheck:boolean = ( i !== techList.length-1 )\n            return (\n                <span>&nbsp;{tech}{lastCheck && \"\\u000A \\u2022\"}</span>\n            )\n        })\n\n        return (\n            <div className=\"card-text\">\n                <a href={link} target=\"_blank\" className={`card-text-title ${odd && \"odd-card\"}`}>{title}</a>\n                <p className={`card-text-text`}>{text}</p>\n                <p className={`card-text-tech ${odd && \"odd-card\"}`}>{usedTech}</p>\n            </div>\n        )\n    }\n\n    // Returning card\n    if (odd) {\n        return (\n            <motion.div className=\"project-card\">\n                <CardImage blob={blob} image={image} />\n                <CardText title={title} text={text} techList={techList} link={link} />\n            </motion.div>\n        )\n    } else {\n        return (\n            <motion.div className=\"project-card\">\n                <CardText title={title} text={text} techList={techList} link={link}/>\n                <CardImage blob={blob} image={image} />\n            </motion.div>\n        )  \n    }\n}",{"ruleId":"192","severity":1,"message":"193","line":7,"column":8,"nodeType":"194","messageId":"195","endLine":7,"endColumn":12},{"ruleId":"196","severity":1,"message":"197","line":67,"column":13,"nodeType":"198","endLine":67,"endColumn":37},{"ruleId":"196","severity":1,"message":"197","line":80,"column":15,"nodeType":"198","endLine":80,"endColumn":39},{"ruleId":"196","severity":1,"message":"197","line":83,"column":15,"nodeType":"198","endLine":83,"endColumn":39},{"ruleId":"196","severity":1,"message":"197","line":86,"column":15,"nodeType":"198","endLine":86,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":14,"column":25,"nodeType":"194","messageId":"201","endLine":14,"endColumn":29},{"ruleId":"199","severity":1,"message":"202","line":10,"column":25,"nodeType":"194","messageId":"201","endLine":10,"endColumn":29},{"ruleId":"192","severity":1,"message":"203","line":2,"column":18,"nodeType":"194","messageId":"195","endLine":2,"endColumn":33},{"ruleId":"199","severity":1,"message":"204","line":12,"column":25,"nodeType":"194","messageId":"201","endLine":12,"endColumn":36},{"ruleId":"192","severity":1,"message":"205","line":14,"column":11,"nodeType":"194","messageId":"195","endLine":14,"endColumn":22},{"ruleId":"192","severity":1,"message":"206","line":3,"column":8,"nodeType":"194","messageId":"195","endLine":3,"endColumn":12},{"ruleId":"199","severity":1,"message":"207","line":61,"column":7,"nodeType":"194","messageId":"201","endLine":61,"endColumn":22},{"ruleId":"199","severity":1,"message":"208","line":85,"column":25,"nodeType":"194","messageId":"201","endLine":85,"endColumn":33},{"ruleId":"192","severity":1,"message":"209","line":86,"column":22,"nodeType":"194","messageId":"195","endLine":86,"endColumn":31},{"ruleId":"192","severity":1,"message":"210","line":86,"column":33,"nodeType":"194","messageId":"195","endLine":86,"endColumn":43},{"ruleId":"199","severity":1,"message":"211","line":12,"column":25,"nodeType":"194","messageId":"201","endLine":12,"endColumn":31},{"ruleId":"199","severity":1,"message":"212","line":147,"column":25,"nodeType":"194","messageId":"201","endLine":147,"endColumn":30},{"ruleId":null,"fatal":true,"severity":2,"message":"213","line":6,"column":13},{"ruleId":"192","severity":1,"message":"214","line":40,"column":14,"nodeType":"194","messageId":"195","endLine":40,"endColumn":20},{"ruleId":"192","severity":1,"message":"215","line":67,"column":14,"nodeType":"194","messageId":"195","endLine":67,"endColumn":29},{"ruleId":"192","severity":1,"message":"216","line":79,"column":14,"nodeType":"194","messageId":"195","endLine":79,"endColumn":23},{"ruleId":"192","severity":1,"message":"217","line":95,"column":14,"nodeType":"194","messageId":"195","endLine":95,"endColumn":18},{"ruleId":"199","severity":1,"message":"218","line":11,"column":25,"nodeType":"194","messageId":"201","endLine":11,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":38,"column":13,"nodeType":"198","messageId":"221","endLine":38,"endColumn":106,"fix":"222"},{"ruleId":"219","severity":1,"message":"220","line":48,"column":13,"nodeType":"198","messageId":"221","endLine":48,"endColumn":116,"fix":"223"},{"ruleId":"219","severity":1,"message":"220","line":58,"column":13,"nodeType":"198","messageId":"221","endLine":58,"endColumn":101,"fix":"224"},{"ruleId":"199","severity":1,"message":"225","line":13,"column":25,"nodeType":"194","messageId":"201","endLine":13,"endColumn":33},{"ruleId":"192","severity":1,"message":"226","line":16,"column":13,"nodeType":"194","messageId":"195","endLine":16,"endColumn":16},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","endLine":47,"endColumn":2},{"ruleId":"192","severity":1,"message":"230","line":18,"column":11,"nodeType":"194","messageId":"195","endLine":18,"endColumn":25},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","endLine":19,"endColumn":2},{"ruleId":"192","severity":1,"message":"231","line":16,"column":13,"nodeType":"194","messageId":"195","endLine":16,"endColumn":21},{"ruleId":"219","severity":1,"message":"220","line":31,"column":17,"nodeType":"198","messageId":"221","endLine":31,"endColumn":81,"fix":"232"},{"ruleId":"233","severity":1,"message":"234","line":32,"column":21,"nodeType":"198","endLine":36,"endColumn":23},{"ruleId":"219","severity":1,"message":"220","line":51,"column":17,"nodeType":"198","messageId":"221","endLine":51,"endColumn":99,"fix":"235"},"@typescript-eslint/no-unused-vars","'Wave' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-redeclare","'Home' is already defined.","redeclared","'Disk' is already defined.","'AnimatePresence' is defined but never used.","'HomeProfile' is already defined.","'strokeColor' is assigned a value but never used.","'Disk' is defined but never used.","'AnimatedLetters' is already defined.","'HomeText' is already defined.","'darkColor' is assigned a value but never used.","'lightColor' is assigned a value but never used.","'Circle' is already defined.","'About' is already defined.","Parsing error: Type expected.","'Sphere' is defined but never used.","'BackgroundPlane' is defined but never used.","'BlurPlane' is defined but never used.","'Test' is defined but never used.","'Contact' is already defined.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"236","text":"237"},{"range":"238","text":"237"},{"range":"239","text":"237"},"'Projects' is already defined.","'ref' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'blobTransition' is assigned a value but never used.","'darkMode' is assigned a value but never used.",{"range":"240","text":"237"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"range":"241","text":"237"},[1033,1033]," rel=\"noreferrer\"",[1512,1512],[1982,1982],[977,977],[1683,1683]]